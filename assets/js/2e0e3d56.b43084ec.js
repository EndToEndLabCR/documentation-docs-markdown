"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[3089],{2883:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"faq-and-troubleshooting/git-conflicts","title":"Git Conflicts","description":"This file provides comprehensive guidance on understanding, preventing, and resolving Git merge conflicts.","source":"@site/docs/faq-and-troubleshooting/git-conflicts.md","sourceDirName":"faq-and-troubleshooting","slug":"/faq-and-troubleshooting/git-conflicts","permalink":"/documentation-docs-markdown/docs/faq-and-troubleshooting/git-conflicts","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/faq-and-troubleshooting/git-conflicts.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Common Errors","permalink":"/documentation-docs-markdown/docs/faq-and-troubleshooting/common-errors"},"next":{"title":"Projects","permalink":"/documentation-docs-markdown/docs/category/projects"}}');var l=i(4848),r=i(8453);const s={},c="Git Conflicts",o={},a=[{value:"Understanding Git Conflicts",id:"understanding-git-conflicts",level:2},{value:"What are Git Conflicts?",id:"what-are-git-conflicts",level:3},{value:"Types of Conflicts",id:"types-of-conflicts",level:3},{value:"Content Conflicts",id:"content-conflicts",level:4},{value:"Rename/Delete Conflicts",id:"renamedelete-conflicts",level:4},{value:"Add/Add Conflicts",id:"addadd-conflicts",level:4},{value:"Identifying Conflicts",id:"identifying-conflicts",level:2},{value:"Check Status",id:"check-status",level:3},{value:"View Conflict Markers",id:"view-conflict-markers",level:3},{value:"Preventing Conflicts",id:"preventing-conflicts",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Keep Branches Short-Lived",id:"keep-branches-short-lived",level:4},{value:"Regular Synchronization",id:"regular-synchronization",level:4},{value:"Coordinate Team Changes",id:"coordinate-team-changes",level:4},{value:"Use .gitattributes for Binary Files",id:"use-gitattributes-for-binary-files",level:4},{value:"Resolving Conflicts",id:"resolving-conflicts",level:2},{value:"Manual Resolution",id:"manual-resolution",level:3},{value:"Step 1: Identify Conflicted Files",id:"step-1-identify-conflicted-files",level:4},{value:"Step 2: Open and Edit Files",id:"step-2-open-and-edit-files",level:4},{value:"Step 3: Mark as Resolved",id:"step-3-mark-as-resolved",level:4},{value:"Step 4: Complete the Merge",id:"step-4-complete-the-merge",level:4},{value:"Using Merge Tools",id:"using-merge-tools",level:3},{value:"Configure Merge Tool",id:"configure-merge-tool",level:4},{value:"Use Merge Tool",id:"use-merge-tool",level:4},{value:"IDE Integration",id:"ide-integration",level:3},{value:"VS Code",id:"vs-code",level:4},{value:"IntelliJ IDEA",id:"intellij-idea",level:4},{value:"Advanced Conflict Resolution",id:"advanced-conflict-resolution",level:2},{value:"Interactive Rebase",id:"interactive-rebase",level:3},{value:"Cherry-pick Conflicts",id:"cherry-pick-conflicts",level:3},{value:"Merge vs Rebase Conflicts",id:"merge-vs-rebase-conflicts",level:3},{value:"Merge Strategy",id:"merge-strategy",level:4},{value:"Rebase Strategy",id:"rebase-strategy",level:4},{value:"Conflict Resolution Strategies",id:"conflict-resolution-strategies",level:2},{value:"Taking One Side Completely",id:"taking-one-side-completely",level:3},{value:"Partial Resolution",id:"partial-resolution",level:3},{value:"Complex Conflicts",id:"complex-conflicts",level:3},{value:"Aborting and Resetting",id:"aborting-and-resetting",level:2},{value:"Abort Operations",id:"abort-operations",level:3},{value:"Emergency Reset",id:"emergency-reset",level:3},{value:"Binary File Conflicts",id:"binary-file-conflicts",level:2},{value:"Understanding Binary Conflicts",id:"understanding-binary-conflicts",level:3},{value:"Resolving Binary Conflicts",id:"resolving-binary-conflicts",level:3},{value:"Preventing Binary Conflicts",id:"preventing-binary-conflicts",level:3},{value:"Team Workflows",id:"team-workflows",level:2},{value:"Conflict Resolution in Pull Requests",id:"conflict-resolution-in-pull-requests",level:3},{value:"GitHub Workflow",id:"github-workflow",level:4},{value:"Local Resolution for PR",id:"local-resolution-for-pr",level:4},{value:"Code Review with Conflicts",id:"code-review-with-conflicts",level:3},{value:"Automated Conflict Resolution",id:"automated-conflict-resolution",level:2},{value:"Git Rerere",id:"git-rerere",level:3},{value:"Custom Merge Drivers",id:"custom-merge-drivers",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"&quot;Already up to date&quot; but conflicts exist",id:"already-up-to-date-but-conflicts-exist",level:4},{value:"Conflicts keep reappearing",id:"conflicts-keep-reappearing",level:4},{value:"Lost changes during conflict resolution",id:"lost-changes-during-conflict-resolution",level:4},{value:"Best Practices Summary",id:"best-practices-summary",level:3},{value:"Emergency Contacts",id:"emergency-contacts",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"git-conflicts",children:"Git Conflicts"})}),"\n",(0,l.jsx)(n.p,{children:"This file provides comprehensive guidance on understanding, preventing, and resolving Git merge conflicts."}),"\n",(0,l.jsx)(n.h2,{id:"understanding-git-conflicts",children:"Understanding Git Conflicts"}),"\n",(0,l.jsx)(n.h3,{id:"what-are-git-conflicts",children:"What are Git Conflicts?"}),"\n",(0,l.jsx)(n.p,{children:"Git conflicts occur when Git cannot automatically merge changes from different branches or commits. This happens when:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The same line in a file has been modified differently in two branches"}),"\n",(0,l.jsx)(n.li,{children:"One branch deletes a file that another branch modifies"}),"\n",(0,l.jsx)(n.li,{children:"Binary files are modified in both branches"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"types-of-conflicts",children:"Types of Conflicts"}),"\n",(0,l.jsx)(n.h4,{id:"content-conflicts",children:"Content Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"Auto-merging file.txt\nCONFLICT (content): Merge conflict in file.txt\nAutomatic merge failed; fix conflicts and then commit the result.\n"})}),"\n",(0,l.jsx)(n.h4,{id:"renamedelete-conflicts",children:"Rename/Delete Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"CONFLICT (modify/delete): file.txt deleted in branch-a and modified in HEAD.\n"})}),"\n",(0,l.jsx)(n.h4,{id:"addadd-conflicts",children:"Add/Add Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"CONFLICT (add/add): Merge conflict in file.txt\n"})}),"\n",(0,l.jsx)(n.h2,{id:"identifying-conflicts",children:"Identifying Conflicts"}),"\n",(0,l.jsx)(n.h3,{id:"check-status",children:"Check Status"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# See which files have conflicts\ngit status\n\n# Output will show:\n# Unmerged paths:\n#   (use "git add <file>..." to mark resolution)\n#         both modified:   src/main.js\n#         deleted by us:   old-file.txt\n#         added by them:   new-file.txt\n'})}),"\n",(0,l.jsx)(n.h3,{id:"view-conflict-markers",children:"View Conflict Markers"}),"\n",(0,l.jsx)(n.p,{children:"When Git encounters a conflict, it marks the conflicting sections in the file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'<<<<<<< HEAD (Current Change)\nconst message = "Hello from main branch";\n=======\nconst message = "Hello from feature branch";\n>>>>>>> feature-branch (Incoming Change)\n'})}),"\n",(0,l.jsx)(n.h2,{id:"preventing-conflicts",children:"Preventing Conflicts"}),"\n",(0,l.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h4,{id:"keep-branches-short-lived",children:"Keep Branches Short-Lived"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Create feature branch\ngit checkout -b feature/quick-fix\n# Make changes and merge quickly\ngit checkout main\ngit merge feature/quick-fix\ngit branch -d feature/quick-fix\n"})}),"\n",(0,l.jsx)(n.h4,{id:"regular-synchronization",children:"Regular Synchronization"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Frequently pull from main\ngit checkout main\ngit pull origin main\n\n# Rebase feature branch regularly\ngit checkout feature-branch\ngit rebase main\n"})}),"\n",(0,l.jsx)(n.h4,{id:"coordinate-team-changes",children:"Coordinate Team Changes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Communicate about files being modified"}),"\n",(0,l.jsx)(n.li,{children:"Use separate files/modules when possible"}),"\n",(0,l.jsx)(n.li,{children:"Plan refactoring activities together"}),"\n",(0,l.jsx)(n.li,{children:"Use feature flags for large changes"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"use-gitattributes-for-binary-files",children:"Use .gitattributes for Binary Files"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# .gitattributes\n*.png binary\n*.jpg binary\n*.pdf binary\n*.docx binary\n"})}),"\n",(0,l.jsx)(n.h2,{id:"resolving-conflicts",children:"Resolving Conflicts"}),"\n",(0,l.jsx)(n.h3,{id:"manual-resolution",children:"Manual Resolution"}),"\n",(0,l.jsx)(n.h4,{id:"step-1-identify-conflicted-files",children:"Step 1: Identify Conflicted Files"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git status\n# or\ngit diff --name-only --diff-filter=U\n"})}),"\n",(0,l.jsx)(n.h4,{id:"step-2-open-and-edit-files",children:"Step 2: Open and Edit Files"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:'// Before resolution\nfunction greet() {\n<<<<<<< HEAD\n    return "Hello from main!";\n=======\n    return "Hello from feature!";\n>>>>>>> feature-branch\n}\n\n// After resolution\nfunction greet() {\n    return "Hello from merged version!";\n}\n'})}),"\n",(0,l.jsx)(n.h4,{id:"step-3-mark-as-resolved",children:"Step 3: Mark as Resolved"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Add the resolved file\ngit add src/main.js\n\n# Check status\ngit status\n"})}),"\n",(0,l.jsx)(n.h4,{id:"step-4-complete-the-merge",children:"Step 4: Complete the Merge"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Commit the merge\ngit commit -m "Resolve merge conflicts in src/main.js"\n\n# Or continue rebase\ngit rebase --continue\n'})}),"\n",(0,l.jsx)(n.h3,{id:"using-merge-tools",children:"Using Merge Tools"}),"\n",(0,l.jsx)(n.h4,{id:"configure-merge-tool",children:"Configure Merge Tool"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Set up VS Code as merge tool\ngit config --global merge.tool vscode\ngit config --global mergetool.vscode.cmd \'code --wait $MERGED\'\n\n# Set up Beyond Compare\ngit config --global merge.tool bc3\ngit config --global mergetool.bc3.path "C:/Program Files/Beyond Compare 4/bcomp.exe"\n\n# Set up P4Merge\ngit config --global merge.tool p4merge\ngit config --global mergetool.p4merge.path "/Applications/p4merge.app/Contents/MacOS/p4merge"\n'})}),"\n",(0,l.jsx)(n.h4,{id:"use-merge-tool",children:"Use Merge Tool"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Launch merge tool for conflicts\ngit mergetool\n\n# This will open your configured tool with three panels:\n# - LOCAL (your changes)\n# - BASE (common ancestor)\n# - REMOTE (their changes)\n# - MERGED (result)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"ide-integration",children:"IDE Integration"}),"\n",(0,l.jsx)(n.h4,{id:"vs-code",children:"VS Code"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Install GitLens extension"}),"\n",(0,l.jsx)(n.li,{children:"Open conflicted file"}),"\n",(0,l.jsx)(n.li,{children:'Use "Accept Current Change", "Accept Incoming Change", or "Accept Both Changes"'}),"\n",(0,l.jsx)(n.li,{children:"Edit manually if needed"}),"\n",(0,l.jsx)(n.li,{children:"Save file and stage changes"}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"intellij-idea",children:"IntelliJ IDEA"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Go to VCS \u2192 Git \u2192 Resolve Conflicts"}),"\n",(0,l.jsx)(n.li,{children:"Select conflicted files"}),"\n",(0,l.jsx)(n.li,{children:"Use the merge dialog with three panels"}),"\n",(0,l.jsx)(n.li,{children:"Choose changes to accept or edit manually"}),"\n",(0,l.jsx)(n.li,{children:'Click "Apply" to resolve'}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"advanced-conflict-resolution",children:"Advanced Conflict Resolution"}),"\n",(0,l.jsx)(n.h3,{id:"interactive-rebase",children:"Interactive Rebase"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Start interactive rebase\ngit rebase -i HEAD~3\n\n# In the editor, choose actions:\npick abc123 First commit\nedit def456 Second commit (has conflicts)\npick ghi789 Third commit\n\n# When conflicts occur during rebase:\n# 1. Resolve conflicts\n# 2. git add resolved-files\n# 3. git rebase --continue\n"})}),"\n",(0,l.jsx)(n.h3,{id:"cherry-pick-conflicts",children:"Cherry-pick Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Cherry-pick commit with conflicts\ngit cherry-pick abc123\n\n# Resolve conflicts\ngit add .\ngit cherry-pick --continue\n\n# Or abort cherry-pick\ngit cherry-pick --abort\n"})}),"\n",(0,l.jsx)(n.h3,{id:"merge-vs-rebase-conflicts",children:"Merge vs Rebase Conflicts"}),"\n",(0,l.jsx)(n.h4,{id:"merge-strategy",children:"Merge Strategy"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'git checkout feature-branch\ngit merge main\n\n# Conflicts appear, resolve them\ngit add .\ngit commit -m "Merge main into feature-branch"\n'})}),"\n",(0,l.jsx)(n.h4,{id:"rebase-strategy",children:"Rebase Strategy"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"git checkout feature-branch\ngit rebase main\n\n# Conflicts appear for each commit\n# Resolve conflicts for first commit\ngit add .\ngit rebase --continue\n\n# Repeat for each conflicted commit\n"})}),"\n",(0,l.jsx)(n.h2,{id:"conflict-resolution-strategies",children:"Conflict Resolution Strategies"}),"\n",(0,l.jsx)(n.h3,{id:"taking-one-side-completely",children:"Taking One Side Completely"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Take your version (current branch)\ngit checkout --ours conflicted-file.txt\n\n# Take their version (incoming branch)\ngit checkout --theirs conflicted-file.txt\n\n# For entire merge, prefer one side\ngit merge -X ours feature-branch\ngit merge -X theirs feature-branch\n"})}),"\n",(0,l.jsx)(n.h3,{id:"partial-resolution",children:"Partial Resolution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Original conflict\nfunction calculateTotal(items) {\n<<<<<<< HEAD\n    return items.reduce((sum, item) => sum + item.price, 0);\n=======\n    return items.reduce((sum, item) => sum + item.cost, 0);\n>>>>>>> feature-branch\n}\n\n// Resolution combining both approaches\nfunction calculateTotal(items) {\n    return items.reduce((sum, item) => sum + (item.price || item.cost), 0);\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"complex-conflicts",children:"Complex Conflicts"}),"\n",(0,l.jsx)(n.p,{children:"For files with multiple conflict sections:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# Show all conflicts in file\ngit diff conflicted-file.txt\n\n# Use pattern to find conflicts\ngrep -n "<<<<<<< HEAD" src/**/*.js\n'})}),"\n",(0,l.jsx)(n.h2,{id:"aborting-and-resetting",children:"Aborting and Resetting"}),"\n",(0,l.jsx)(n.h3,{id:"abort-operations",children:"Abort Operations"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Abort merge\ngit merge --abort\n\n# Abort rebase\ngit rebase --abort\n\n# Abort cherry-pick\ngit cherry-pick --abort\n\n# Reset to before merge attempt\ngit reset --hard HEAD~1\n"})}),"\n",(0,l.jsx)(n.h3,{id:"emergency-reset",children:"Emergency Reset"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Find the commit hash before the problematic merge\ngit reflog\n\n# Reset to that commit\ngit reset --hard abc123\n\n# Force push if already pushed (DANGEROUS)\ngit push --force-with-lease origin branch-name\n"})}),"\n",(0,l.jsx)(n.h2,{id:"binary-file-conflicts",children:"Binary File Conflicts"}),"\n",(0,l.jsx)(n.h3,{id:"understanding-binary-conflicts",children:"Understanding Binary Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Git cannot merge binary files automatically\nwarning: Cannot merge binary files: image.png (HEAD vs. feature-branch)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"resolving-binary-conflicts",children:"Resolving Binary Conflicts"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Choose version from current branch\ngit checkout --ours image.png\n\n# Choose version from incoming branch\ngit checkout --theirs image.png\n\n# Add resolved file\ngit add image.png\n"})}),"\n",(0,l.jsx)(n.h3,{id:"preventing-binary-conflicts",children:"Preventing Binary Conflicts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Use version control for source files, not generated files"}),"\n",(0,l.jsx)(n.li,{children:"Store binary assets in separate repositories"}),"\n",(0,l.jsx)(n.li,{children:"Use Git LFS for large binary files"}),"\n",(0,l.jsx)(n.li,{children:"Coordinate binary file changes in team"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"team-workflows",children:"Team Workflows"}),"\n",(0,l.jsx)(n.h3,{id:"conflict-resolution-in-pull-requests",children:"Conflict Resolution in Pull Requests"}),"\n",(0,l.jsx)(n.h4,{id:"github-workflow",children:"GitHub Workflow"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Create pull request"}),"\n",(0,l.jsx)(n.li,{children:'If conflicts exist, GitHub will show "This branch has conflicts"'}),"\n",(0,l.jsxs)(n.li,{children:["Options:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Resolve conflicts in GitHub web interface"}),"\n",(0,l.jsx)(n.li,{children:"Resolve locally and push"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h4,{id:"local-resolution-for-pr",children:"Local Resolution for PR"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Sync with target branch\ngit checkout main\ngit pull origin main\n\n# Switch to feature branch\ngit checkout feature-branch\n\n# Rebase or merge to resolve conflicts\ngit rebase main\n# or\ngit merge main\n\n# Push resolved changes\ngit push origin feature-branch\n"})}),"\n",(0,l.jsx)(n.h3,{id:"code-review-with-conflicts",children:"Code Review with Conflicts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Resolve conflicts before requesting review"}),"\n",(0,l.jsx)(n.li,{children:"Document complex resolution decisions"}),"\n",(0,l.jsx)(n.li,{children:"Consider splitting large conflicted changes"}),"\n",(0,l.jsx)(n.li,{children:"Use pair programming for complex merges"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"automated-conflict-resolution",children:"Automated Conflict Resolution"}),"\n",(0,l.jsx)(n.h3,{id:"git-rerere",children:"Git Rerere"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Enable rerere (reuse recorded resolution)\ngit config --global rerere.enabled true\n\n# Git will remember how you resolved similar conflicts\n# and automatically apply the same resolution\n"})}),"\n",(0,l.jsx)(n.h3,{id:"custom-merge-drivers",children:"Custom Merge Drivers"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:'# .gitattributes\n*.generated merge=ours\n\n# .git/config\n[merge "ours"]\n    driver = true\n'})}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsx)(n.h4,{id:"already-up-to-date-but-conflicts-exist",children:'"Already up to date" but conflicts exist'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check if you're on the right branch\ngit branch\n\n# Verify remote is up to date\ngit fetch origin\n\n# Check for uncommitted changes\ngit status\n"})}),"\n",(0,l.jsx)(n.h4,{id:"conflicts-keep-reappearing",children:"Conflicts keep reappearing"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check if rerere is causing issues\ngit config --get rerere.enabled\n\n# Clear rerere cache\nrm -rf .git/rr-cache\n\n# Check for automatic merge/rebase tools\ngit config --get-regexp merge\n"})}),"\n",(0,l.jsx)(n.h4,{id:"lost-changes-during-conflict-resolution",children:"Lost changes during conflict resolution"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Check reflog for lost commits\ngit reflog\n\n# Recover lost changes\ngit checkout abc123\n\n# Create new branch from recovered commit\ngit checkout -b recovery-branch abc123\n"})}),"\n",(0,l.jsx)(n.h3,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Prevention"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Keep branches small and short-lived"}),"\n",(0,l.jsx)(n.li,{children:"Regular synchronization with main branch"}),"\n",(0,l.jsx)(n.li,{children:"Good communication within team"}),"\n",(0,l.jsx)(n.li,{children:"Use appropriate .gitattributes"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Resolution"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Understand the conflict before resolving"}),"\n",(0,l.jsx)(n.li,{children:"Test the resolution thoroughly"}),"\n",(0,l.jsx)(n.li,{children:"Document complex resolution decisions"}),"\n",(0,l.jsx)(n.li,{children:"Use appropriate tools (merge tools, IDE integration)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Team Process"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Resolve conflicts before code review"}),"\n",(0,l.jsx)(n.li,{children:"Coordinate on large refactoring efforts"}),"\n",(0,l.jsx)(n.li,{children:"Use consistent merge strategies"}),"\n",(0,l.jsx)(n.li,{children:"Train team members on conflict resolution"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"emergency-contacts",children:"Emergency Contacts"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"For critical production merges: Contact senior developer or team lead"}),"\n",(0,l.jsx)(n.li,{children:"For complex architectural conflicts: Involve system architect"}),"\n",(0,l.jsx)(n.li,{children:"For data-related conflicts: Involve database administrator"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Remember: When in doubt, ask for help rather than risk introducing bugs through incorrect conflict resolution!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var t=i(6540);const l={},r=t.createContext(l);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);