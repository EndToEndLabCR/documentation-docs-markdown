"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[1953],{338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"projects/templates/template-springboot-java","title":"Template Spring Boot Java","description":"This file documents the Spring Boot Java template project structure and implementation details.","source":"@site/docs/projects/templates/template-springboot-java.md","sourceDirName":"projects/templates","slug":"/projects/templates/template-springboot-java","permalink":"/documentation-docs-markdown/docs/projects/templates/template-springboot-java","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/projects/templates/template-springboot-java.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Template API Python","permalink":"/documentation-docs-markdown/docs/projects/templates/template-api-python"},"next":{"title":"TODO App Project Idea","permalink":"/documentation-docs-markdown/docs/projects/todo-app/"}}');var s=t(4848),a=t(8453);const i={},o="Template Spring Boot Java",l={},c=[{value:"Project Overview",id:"project-overview",level:2},{value:"Tech Stack",id:"tech-stack",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Spring Security Integration",id:"spring-security-integration",level:3},{value:"Entity Design",id:"entity-design",level:3},{value:"Service Layer",id:"service-layer",level:3},{value:"REST Controller",id:"rest-controller",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Application Properties",id:"application-properties",level:3},{value:"Testing",id:"testing",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Docker Configuration",id:"docker-configuration",level:2},{value:"Best Practices Implemented",id:"best-practices-implemented",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"template-spring-boot-java",children:"Template Spring Boot Java"})}),"\n",(0,s.jsx)(n.p,{children:"This file documents the Spring Boot Java template project structure and implementation details."}),"\n",(0,s.jsx)(n.h2,{id:"project-overview",children:"Project Overview"}),"\n",(0,s.jsx)(n.p,{children:"The Template Spring Boot Java is a comprehensive starter template for building enterprise-grade Java applications using Spring Boot. It incorporates modern Java development practices and industry-standard patterns."}),"\n",(0,s.jsx)(n.h2,{id:"tech-stack",children:"Tech Stack"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Framework"}),": Spring Boot 3.x"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Java Version"}),": Java 17+"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Database"}),": PostgreSQL with Spring Data JPA"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Security"}),": Spring Security with JWT"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Testing"}),": JUnit 5, Mockito, TestContainers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Build Tool"}),": Maven or Gradle"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Documentation"}),": SpringDoc OpenAPI 3"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"template-springboot-java/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 com/endtoendlabcr/template/\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 config/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 SecurityConfig.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 DatabaseConfig.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 controller/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 AuthController.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 UserController.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 UserDto.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 AuthDto.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 entity/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 User.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 BaseEntity.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 repository/\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 UserRepository.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 service/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 UserService.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 AuthService.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 security/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 JwtAuthenticationFilter.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 JwtTokenProvider.java\n\u2502   \u2502   \u2502       \u251c\u2500\u2500 exception/\n\u2502   \u2502   \u2502       \u2502   \u251c\u2500\u2500 GlobalExceptionHandler.java\n\u2502   \u2502   \u2502       \u2502   \u2514\u2500\u2500 CustomExceptions.java\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 TemplateApplication.java\n\u2502   \u2502   \u2514\u2500\u2500 resources/\n\u2502   \u2502       \u251c\u2500\u2500 application.yml\n\u2502   \u2502       \u251c\u2500\u2500 application-dev.yml\n\u2502   \u2502       \u2514\u2500\u2500 db/migration/\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u2514\u2500\u2500 java/\n\u2502           \u2514\u2500\u2500 com/endtoendlabcr/template/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,s.jsx)(n.h3,{id:"spring-security-integration",children:"Spring Security Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity\npublic class SecurityConfig {\n    \n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        return http\n            .csrf(csrf -> csrf.disable())\n            .sessionManagement(session -> session.sessionCreationPolicy(STATELESS))\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers("/api/auth/**").permitAll()\n                .requestMatchers("/api/public/**").permitAll()\n                .anyRequest().authenticated()\n            )\n            .addFilterBefore(jwtAuthenticationFilter(), UsernamePasswordAuthenticationFilter.class)\n            .build();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"entity-design",children:"Entity Design"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Entity\n@Table(name = "users")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class User extends BaseEntity {\n    \n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    \n    @Column(unique = true, nullable = false)\n    @Email\n    private String email;\n    \n    @Column(nullable = false)\n    private String password;\n    \n    @Column(name = "full_name")\n    private String fullName;\n    \n    @Enumerated(EnumType.STRING)\n    private UserRole role;\n    \n    @Column(name = "is_active")\n    private Boolean isActive = true;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"service-layer",children:"Service Layer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Service\n@Transactional\n@RequiredArgsConstructor\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final UserMapper userMapper;\n    \n    public UserDto createUser(CreateUserDto createUserDto) {\n        if (userRepository.existsByEmail(createUserDto.getEmail())) {\n            throw new UserAlreadyExistsException("User with email already exists");\n        }\n        \n        User user = User.builder()\n            .email(createUserDto.getEmail())\n            .password(passwordEncoder.encode(createUserDto.getPassword()))\n            .fullName(createUserDto.getFullName())\n            .role(UserRole.USER)\n            .build();\n        \n        User savedUser = userRepository.save(user);\n        return userMapper.toDto(savedUser);\n    }\n    \n    @Transactional(readOnly = true)\n    public Page<UserDto> getAllUsers(Pageable pageable) {\n        return userRepository.findAll(pageable)\n            .map(userMapper::toDto);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rest-controller",children:"REST Controller"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@RestController\n@RequestMapping("/api/users")\n@RequiredArgsConstructor\n@Validated\npublic class UserController {\n    \n    private final UserService userService;\n    \n    @PostMapping\n    @ResponseStatus(HttpStatus.CREATED)\n    public ResponseEntity<UserDto> createUser(@Valid @RequestBody CreateUserDto createUserDto) {\n        UserDto user = userService.createUser(createUserDto);\n        return ResponseEntity.created(URI.create("/api/users/" + user.getId())).body(user);\n    }\n    \n    @GetMapping\n    public ResponseEntity<Page<UserDto>> getAllUsers(\n            @PageableDefault(size = 20) Pageable pageable) {\n        Page<UserDto> users = userService.getAllUsers(pageable);\n        return ResponseEntity.ok(users);\n    }\n    \n    @GetMapping("/{id}")\n    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {\n        UserDto user = userService.getUserById(id);\n        return ResponseEntity.ok(user);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"application-properties",children:"Application Properties"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# application.yml\nspring:\n  application:\n    name: template-springboot-java\n  profiles:\n    active: dev\n  \n  datasource:\n    url: jdbc:postgresql://localhost:5432/template_db\n    username: ${DB_USERNAME:postgres}\n    password: ${DB_PASSWORD:password}\n    driver-class-name: org.postgresql.Driver\n  \n  jpa:\n    hibernate:\n      ddl-auto: validate\n    show-sql: false\n    properties:\n      hibernate:\n        dialect: org.hibernate.dialect.PostgreSQLDialect\n        format_sql: true\n\njwt:\n  secret: ${JWT_SECRET:your-secret-key}\n  expiration: 86400000 # 24 hours\n\nlogging:\n  level:\n    com.endtoendlabcr.template: DEBUG\n    org.springframework.security: DEBUG\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\nclass UserServiceTest {\n    \n    @Mock\n    private UserRepository userRepository;\n    \n    @Mock\n    private PasswordEncoder passwordEncoder;\n    \n    @InjectMocks\n    private UserService userService;\n    \n    @Test\n    void createUser_ShouldReturnUserDto_WhenValidInput() {\n        // Given\n        CreateUserDto createUserDto = new CreateUserDto("test@example.com", "password", "Test User");\n        User savedUser = User.builder().id(1L).email("test@example.com").build();\n        \n        when(userRepository.existsByEmail(createUserDto.getEmail())).thenReturn(false);\n        when(passwordEncoder.encode(createUserDto.getPassword())).thenReturn("encoded-password");\n        when(userRepository.save(any(User.class))).thenReturn(savedUser);\n        \n        // When\n        UserDto result = userService.createUser(createUserDto);\n        \n        // Then\n        assertThat(result.getEmail()).isEqualTo("test@example.com");\n        verify(userRepository).save(any(User.class));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@TestPropertySource(properties = "spring.profiles.active=test")\nclass UserControllerIntegrationTest {\n    \n    @Autowired\n    private TestRestTemplate restTemplate;\n    \n    @Autowired\n    private UserRepository userRepository;\n    \n    @Test\n    void createUser_ShouldReturn201_WhenValidInput() {\n        // Given\n        CreateUserDto createUserDto = new CreateUserDto("test@example.com", "password", "Test User");\n        \n        // When\n        ResponseEntity<UserDto> response = restTemplate.postForEntity(\n            "/api/users", createUserDto, UserDto.class);\n        \n        // Then\n        assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n        assertThat(response.getBody().getEmail()).isEqualTo("test@example.com");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM openjdk:17-jdk-slim\n\nWORKDIR /app\n\nCOPY target/template-springboot-java-*.jar app.jar\n\nEXPOSE 8080\n\nENTRYPOINT ["java", "-jar", "app.jar"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-implemented",children:"Best Practices Implemented"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Layered architecture (Controller \u2192 Service \u2192 Repository)"}),"\n",(0,s.jsx)(n.li,{children:"DTO pattern for data transfer"}),"\n",(0,s.jsx)(n.li,{children:"Global exception handling"}),"\n",(0,s.jsx)(n.li,{children:"Input validation"}),"\n",(0,s.jsx)(n.li,{children:"Pagination and sorting"}),"\n",(0,s.jsx)(n.li,{children:"Database migrations with Flyway"}),"\n",(0,s.jsx)(n.li,{children:"Comprehensive logging"}),"\n",(0,s.jsx)(n.li,{children:"Security best practices"}),"\n",(0,s.jsx)(n.li,{children:"Test-driven development"}),"\n",(0,s.jsx)(n.li,{children:"Docker containerization"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);