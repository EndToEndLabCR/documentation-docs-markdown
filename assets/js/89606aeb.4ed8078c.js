"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[426],{8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}},9291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"tech-stack/frontend/react/testing-react","title":"Testing React Applications","description":"This file covers testing strategies and tools for React applications.","source":"@site/docs/tech-stack/frontend/react/testing-react.md","sourceDirName":"tech-stack/frontend/react","slug":"/tech-stack/frontend/react/testing-react","permalink":"/documentation-docs-markdown/docs/tech-stack/frontend/react/testing-react","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/tech-stack/frontend/react/testing-react.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"State Management in React","permalink":"/documentation-docs-markdown/docs/tech-stack/frontend/react/state-management"},"next":{"title":"Branching Strategy","permalink":"/documentation-docs-markdown/docs/tech-stack/git-and-github/branching-strategy"}}');var r=n(4848),i=n(8453);const o={},c="Testing React Applications",a={},l=[{value:"Testing Tools",id:"testing-tools",level:2},{value:"Jest + React Testing Library (Recommended)",id:"jest--react-testing-library-recommended",level:3},{value:"Setup",id:"setup",level:3},{value:"Component Testing",id:"component-testing",level:2},{value:"Basic Component Test",id:"basic-component-test",level:3},{value:"Testing Hooks",id:"testing-hooks",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Testing with Context",id:"testing-with-context",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"testing-react-applications",children:"Testing React Applications"})}),"\n",(0,r.jsx)(t.p,{children:"This file covers testing strategies and tools for React applications."}),"\n",(0,r.jsx)(t.h2,{id:"testing-tools",children:"Testing Tools"}),"\n",(0,r.jsx)(t.h3,{id:"jest--react-testing-library-recommended",children:"Jest + React Testing Library (Recommended)"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Jest: Test runner and assertion library"}),"\n",(0,r.jsx)(t.li,{children:"React Testing Library: Testing utilities focused on user behavior"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install --save-dev @testing-library/react @testing-library/jest-dom\n"})}),"\n",(0,r.jsx)(t.h2,{id:"component-testing",children:"Component Testing"}),"\n",(0,r.jsx)(t.h3,{id:"basic-component-test",children:"Basic Component Test"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:'import React from "react";\nimport { render, screen, fireEvent } from "@testing-library/react";\nimport "@testing-library/jest-dom";\nimport Button from "./Button";\n\ntest("renders button with text", () => {\n  render(<Button>Click me</Button>);\n  expect(screen.getByRole("button")).toHaveTextContent("Click me");\n});\n\ntest("calls onClick when clicked", () => {\n  const handleClick = jest.fn();\n  render(<Button onClick={handleClick}>Click me</Button>);\n\n  fireEvent.click(screen.getByRole("button"));\n  expect(handleClick).toHaveBeenCalledTimes(1);\n});\n'})}),"\n",(0,r.jsx)(t.h3,{id:"testing-hooks",children:"Testing Hooks"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:'import { renderHook, act } from "@testing-library/react";\nimport useCounter from "./useCounter";\n\ntest("should increment counter", () => {\n  const { result } = renderHook(() => useCounter());\n\n  act(() => {\n    result.current.increment();\n  });\n\n  expect(result.current.count).toBe(1);\n});\n'})}),"\n",(0,r.jsx)(t.h2,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,r.jsx)(t.h3,{id:"testing-with-context",children:"Testing with Context"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:'import { render, screen } from "@testing-library/react";\nimport { AuthProvider } from "./AuthContext";\nimport UserProfile from "./UserProfile";\n\nconst renderWithAuth = (ui, { user = null } = {}) => {\n  return render(<AuthProvider value={{ user }}>{ui}</AuthProvider>);\n};\n\ntest("displays user name when logged in", () => {\n  const user = { name: "John Doe" };\n  renderWithAuth(<UserProfile />, { user });\n\n  expect(screen.getByText("John Doe")).toBeInTheDocument();\n});\n'})}),"\n",(0,r.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Test behavior, not implementation"}),"\n",(0,r.jsx)(t.li,{children:"Use data-testid sparingly"}),"\n",(0,r.jsx)(t.li,{children:"Test user interactions"}),"\n",(0,r.jsx)(t.li,{children:"Mock external dependencies"}),"\n",(0,r.jsx)(t.li,{children:"Test error states"}),"\n",(0,r.jsx)(t.li,{children:"Maintain good test coverage"}),"\n",(0,r.jsx)(t.li,{children:"Write descriptive test names"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);