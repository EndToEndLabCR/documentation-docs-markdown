"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[2036],{2145:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"guides-and-tutorials/setting-up-local-environment","title":"Setting Up Local Environment","description":"This file provides step-by-step instructions for setting up a complete development environment.","source":"@site/docs/guides-and-tutorials/setting-up-local-environment.md","sourceDirName":"guides-and-tutorials","slug":"/guides-and-tutorials/setting-up-local-environment","permalink":"/documentation-docs-markdown/docs/guides-and-tutorials/setting-up-local-environment","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/guides-and-tutorials/setting-up-local-environment.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Onboarding Guide","permalink":"/documentation-docs-markdown/docs/guides-and-tutorials/onboarding-guide"},"next":{"title":"Tech Stack","permalink":"/documentation-docs-markdown/docs/category/tech-stack"}}');var t=s(4848),i=s(8453);const o={},a="Setting Up Local Environment",r={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Operating System Setup",id:"operating-system-setup",level:2},{value:"macOS Setup",id:"macos-setup",level:3},{value:"Install Homebrew",id:"install-homebrew",level:4},{value:"Install Essential Tools",id:"install-essential-tools",level:4},{value:"Windows Setup",id:"windows-setup",level:3},{value:"Install Chocolatey",id:"install-chocolatey",level:4},{value:"Install Essential Tools",id:"install-essential-tools-1",level:4},{value:"Linux (Ubuntu/Debian) Setup",id:"linux-ubuntudebian-setup",level:3},{value:"Update System",id:"update-system",level:4},{value:"Install Essential Tools",id:"install-essential-tools-2",level:4},{value:"Development Tools Installation",id:"development-tools-installation",level:2},{value:"Git Configuration",id:"git-configuration",level:3},{value:"SSH Key Setup",id:"ssh-key-setup",level:3},{value:"Python Environment Setup",id:"python-environment-setup",level:3},{value:"Install Poetry (Recommended)",id:"install-poetry-recommended",level:4},{value:"Alternative: Traditional Virtual Environment",id:"alternative-traditional-virtual-environment",level:4},{value:"Node.js Environment Setup",id:"nodejs-environment-setup",level:3},{value:"Install Node Version Manager (Optional but Recommended)",id:"install-node-version-manager-optional-but-recommended",level:4},{value:"Install Global Packages",id:"install-global-packages",level:4},{value:"Java Environment Setup",id:"java-environment-setup",level:3},{value:"Set JAVA_HOME",id:"set-java_home",level:4},{value:"Install Maven",id:"install-maven",level:4},{value:"Database Setup",id:"database-setup",level:2},{value:"PostgreSQL Configuration",id:"postgresql-configuration",level:3},{value:"Redis Configuration",id:"redis-configuration",level:3},{value:"Docker Setup",id:"docker-setup",level:2},{value:"Docker Desktop Installation",id:"docker-desktop-installation",level:3},{value:"Verify Docker Installation",id:"verify-docker-installation",level:3},{value:"IDE Configuration",id:"ide-configuration",level:2},{value:"Visual Studio Code Setup",id:"visual-studio-code-setup",level:3},{value:"Install Essential Extensions",id:"install-essential-extensions",level:4},{value:"Configure Settings",id:"configure-settings",level:4},{value:"IntelliJ IDEA Setup",id:"intellij-idea-setup",level:3},{value:"Install Plugins",id:"install-plugins",level:4},{value:"Configure Code Style",id:"configure-code-style",level:4},{value:"Environment Variables",id:"environment-variables",level:2},{value:"Create Environment Files",id:"create-environment-files",level:3},{value:"Testing the Setup",id:"testing-the-setup",level:2},{value:"Clone and Run Sample Project",id:"clone-and-run-sample-project",level:3},{value:"Verify All Tools",id:"verify-all-tools",level:3},{value:"Troubleshooting Common Issues",id:"troubleshooting-common-issues",level:2},{value:"Permission Issues (macOS/Linux)",id:"permission-issues-macoslinux",level:3},{value:"PATH Issues",id:"path-issues",level:3},{value:"Port Conflicts",id:"port-conflicts",level:3},{value:"Database Connection Issues",id:"database-connection-issues",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Maintenance",id:"maintenance",level:2},{value:"Regular Updates",id:"regular-updates",level:3},{value:"Backup Configuration",id:"backup-configuration",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"setting-up-local-environment",children:"Setting Up Local Environment"})}),"\n",(0,t.jsx)(n.p,{children:"This file provides step-by-step instructions for setting up a complete development environment."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(n.p,{children:"Before starting, ensure you have administrative access to your machine and a stable internet connection."}),"\n",(0,t.jsx)(n.h2,{id:"operating-system-setup",children:"Operating System Setup"}),"\n",(0,t.jsx)(n.h3,{id:"macos-setup",children:"macOS Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-homebrew",children:"Install Homebrew"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Install Homebrew (package manager for macOS)\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# Add Homebrew to PATH\necho \'eval "$(/opt/homebrew/bin/brew shellenv)"\' >> ~/.zprofile\neval "$(/opt/homebrew/bin/brew shellenv)"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"install-essential-tools",children:"Install Essential Tools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Development tools\nbrew install git node python@3.11 java docker postgresql redis\n\n# Optional but recommended\nbrew install --cask visual-studio-code intellij-idea-ce postman docker-desktop\n"})}),"\n",(0,t.jsx)(n.h3,{id:"windows-setup",children:"Windows Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-chocolatey",children:"Install Chocolatey"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"# Run PowerShell as Administrator\nSet-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\niex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n"})}),"\n",(0,t.jsx)(n.h4,{id:"install-essential-tools-1",children:"Install Essential Tools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-powershell",children:"# Development tools\nchoco install git nodejs python java docker-desktop postgresql redis-64 -y\n\n# IDEs and editors\nchoco install vscode intellijidea-community postman -y\n"})}),"\n",(0,t.jsx)(n.h3,{id:"linux-ubuntudebian-setup",children:"Linux (Ubuntu/Debian) Setup"}),"\n",(0,t.jsx)(n.h4,{id:"update-system",children:"Update System"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"sudo apt update && sudo apt upgrade -y\n"})}),"\n",(0,t.jsx)(n.h4,{id:"install-essential-tools-2",children:"Install Essential Tools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Development tools\nsudo apt install -y git curl wget build-essential\n\n# Node.js (using NodeSource repository)\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Python\nsudo apt install -y python3 python3-pip python3-venv\n\n# Java\nsudo apt install -y openjdk-17-jdk\n\n# Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -aG docker $USER\n\n# PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Redis\nsudo apt install -y redis-server\n"})}),"\n",(0,t.jsx)(n.h2,{id:"development-tools-installation",children:"Development Tools Installation"}),"\n",(0,t.jsx)(n.h3,{id:"git-configuration",children:"Git Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Set up your identity\ngit config --global user.name "Your Name"\ngit config --global user.email "your.email@company.com"\n\n# Set up default branch name\ngit config --global init.defaultBranch main\n\n# Useful aliases\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.lg "log --oneline --graph --decorate"\n\n# Enable credential helper (macOS)\ngit config --global credential.helper osxkeychain\n\n# Enable credential helper (Windows)\ngit config --global credential.helper manager-core\n\n# Enable credential helper (Linux)\ngit config --global credential.helper cache\n'})}),"\n",(0,t.jsx)(n.h3,{id:"ssh-key-setup",children:"SSH Key Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Generate SSH key\nssh-keygen -t ed25519 -C "your.email@company.com"\n\n# Add to SSH agent (macOS/Linux)\neval "$(ssh-agent -s)"\nssh-add ~/.ssh/id_ed25519\n\n# Copy public key to clipboard (macOS)\npbcopy < ~/.ssh/id_ed25519.pub\n\n# Copy public key to clipboard (Linux)\ncat ~/.ssh/id_ed25519.pub | xclip -selection clipboard\n\n# Copy public key to clipboard (Windows)\nclip < ~/.ssh/id_ed25519.pub\n'})}),"\n",(0,t.jsx)(n.p,{children:"Add the copied public key to your GitHub account: Settings \u2192 SSH and GPG keys \u2192 New SSH key"}),"\n",(0,t.jsx)(n.h3,{id:"python-environment-setup",children:"Python Environment Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-poetry-recommended",children:"Install Poetry (Recommended)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install Poetry\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Add Poetry to PATH\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Configure Poetry\npoetry config virtualenvs.in-project true\n"})}),"\n",(0,t.jsx)(n.h4,{id:"alternative-traditional-virtual-environment",children:"Alternative: Traditional Virtual Environment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create virtual environment\npython3 -m venv venv\n\n# Activate virtual environment\n# macOS/Linux:\nsource venv/bin/activate\n# Windows:\nvenv\\Scripts\\activate\n\n# Install common packages\npip install --upgrade pip\npip install requests fastapi uvicorn pytest black flake8\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nodejs-environment-setup",children:"Node.js Environment Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-node-version-manager-optional-but-recommended",children:"Install Node Version Manager (Optional but Recommended)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install nvm (macOS/Linux)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\nsource ~/.bashrc\n\n# Install and use latest LTS Node.js\nnvm install --lts\nnvm use --lts\nnvm alias default node\n"})}),"\n",(0,t.jsx)(n.h4,{id:"install-global-packages",children:"Install Global Packages"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install -g @angular/cli create-react-app typescript ts-node nodemon\n"})}),"\n",(0,t.jsx)(n.h3,{id:"java-environment-setup",children:"Java Environment Setup"}),"\n",(0,t.jsx)(n.h4,{id:"set-java_home",children:"Set JAVA_HOME"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# macOS (add to ~/.zshrc or ~/.bash_profile)\nexport JAVA_HOME=$(/usr/libexec/java_home)\n\n# Linux (add to ~/.bashrc)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64\n\n# Windows (set environment variable)\n# JAVA_HOME = C:\\Program Files\\Java\\jdk-17\n"})}),"\n",(0,t.jsx)(n.h4,{id:"install-maven",children:"Install Maven"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# macOS\nbrew install maven\n\n# Linux\nsudo apt install maven\n\n# Windows\nchoco install maven\n"})}),"\n",(0,t.jsx)(n.h2,{id:"database-setup",children:"Database Setup"}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-configuration",children:"PostgreSQL Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start PostgreSQL service\n# macOS (if installed via Homebrew)\nbrew services start postgresql\n\n# Linux\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create development database\ncreatedb devdb\n\n# Connect to PostgreSQL\npsql postgres\n\n-- Create development user\nCREATE USER devuser WITH ENCRYPTED PASSWORD 'devpassword';\nGRANT ALL PRIVILEGES ON DATABASE devdb TO devuser;\nALTER USER devuser CREATEDB;\n\\q\n"})}),"\n",(0,t.jsx)(n.h3,{id:"redis-configuration",children:"Redis Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Start Redis service\n# macOS\nbrew services start redis\n\n# Linux\nsudo systemctl start redis-server\nsudo systemctl enable redis-server\n\n# Test Redis connection\nredis-cli ping\n# Should return: PONG\n"})}),"\n",(0,t.jsx)(n.h2,{id:"docker-setup",children:"Docker Setup"}),"\n",(0,t.jsx)(n.h3,{id:"docker-desktop-installation",children:"Docker Desktop Installation"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Download Docker Desktop from ",(0,t.jsx)(n.a,{href:"https://www.docker.com/products/docker-desktop",children:"docker.com"})]}),"\n",(0,t.jsx)(n.li,{children:"Install and start Docker Desktop"}),"\n",(0,t.jsx)(n.li,{children:"Sign in to Docker Hub (optional but recommended)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"verify-docker-installation",children:"Verify Docker Installation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check Docker version\ndocker --version\ndocker-compose --version\n\n# Test Docker installation\ndocker run hello-world\n\n# Pull common base images\ndocker pull node:18-alpine\ndocker pull python:3.11-slim\ndocker pull postgres:14\ndocker pull redis:7-alpine\n"})}),"\n",(0,t.jsx)(n.h2,{id:"ide-configuration",children:"IDE Configuration"}),"\n",(0,t.jsx)(n.h3,{id:"visual-studio-code-setup",children:"Visual Studio Code Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-essential-extensions",children:"Install Essential Extensions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Install VS Code extensions via command line\ncode --install-extension ms-python.python\ncode --install-extension ms-vscode.vscode-typescript-next\ncode --install-extension bradlc.vscode-tailwindcss\ncode --install-extension esbenp.prettier-vscode\ncode --install-extension ms-vscode.vscode-json\ncode --install-extension redhat.vscode-yaml\ncode --install-extension ms-vscode-remote.remote-containers\ncode --install-extension GitHub.copilot\n"})}),"\n",(0,t.jsx)(n.h4,{id:"configure-settings",children:"Configure Settings"}),"\n",(0,t.jsxs)(n.p,{children:["Create ",(0,t.jsx)(n.code,{children:".vscode/settings.json"})," in your workspace:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "editor.formatOnSave": true,\n  "editor.codeActionsOnSave": {\n    "source.organizeImports": true\n  },\n  "python.defaultInterpreterPath": "./venv/bin/python",\n  "python.formatting.provider": "black",\n  "python.linting.enabled": true,\n  "python.linting.flake8Enabled": true,\n  "typescript.preferences.importModuleSpecifier": "relative",\n  "editor.rulers": [80, 120],\n  "files.trimTrailingWhitespace": true,\n  "files.insertFinalNewline": true\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"intellij-idea-setup",children:"IntelliJ IDEA Setup"}),"\n",(0,t.jsx)(n.h4,{id:"install-plugins",children:"Install Plugins"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Python (if using IntelliJ IDEA Ultimate)"}),"\n",(0,t.jsx)(n.li,{children:"Docker"}),"\n",(0,t.jsx)(n.li,{children:"GitToolBox"}),"\n",(0,t.jsx)(n.li,{children:"Rainbow Brackets"}),"\n",(0,t.jsx)(n.li,{children:"SonarLint"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"configure-code-style",children:"Configure Code Style"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Go to Settings \u2192 Editor \u2192 Code Style"}),"\n",(0,t.jsx)(n.li,{children:"Import scheme from company style guide"}),"\n",(0,t.jsx)(n.li,{children:"Set line length to 120 characters"}),"\n",(0,t.jsx)(n.li,{children:"Enable auto-formatting on save"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,t.jsx)(n.h3,{id:"create-environment-files",children:"Create Environment Files"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Create global environment file\ntouch ~/.env\n\n# Add common environment variables\necho 'export DATABASE_URL=\"postgresql://devuser:devpassword@localhost:5432/devdb\"' >> ~/.env\necho 'export REDIS_URL=\"redis://localhost:6379\"' >> ~/.env\necho 'export NODE_ENV=\"development\"' >> ~/.env\necho 'export PYTHON_ENV=\"development\"' >> ~/.env\n\n# Source the file\nsource ~/.env\n\n# Add to shell profile\necho 'source ~/.env' >> ~/.bashrc\n"})}),"\n",(0,t.jsx)(n.h2,{id:"testing-the-setup",children:"Testing the Setup"}),"\n",(0,t.jsx)(n.h3,{id:"clone-and-run-sample-project",children:"Clone and Run Sample Project"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Clone our template repository\ngit clone https://github.com/EndToEndLabCR/template-api-python.git\ncd template-api-python\n\n# Set up Python environment\npoetry install  # or pip install -r requirements.txt\n\n# Run the application\npoetry run uvicorn app.main:app --reload\n\n# Test in another terminal\ncurl http://localhost:8000/health\n"})}),"\n",(0,t.jsx)(n.h3,{id:"verify-all-tools",children:"Verify All Tools"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# Check all installations\necho "=== Tool Versions ==="\ngit --version\nnode --version\nnpm --version\npython3 --version\njava -version\nmvn --version\ndocker --version\npsql --version\nredis-cli --version\n\necho "=== Service Status ==="\n# Test database connection\npsql -h localhost -U devuser -d devdb -c "SELECT version();"\n\n# Test Redis connection\nredis-cli ping\n\n# Test Docker\ndocker run --rm hello-world\n'})}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting-common-issues",children:"Troubleshooting Common Issues"}),"\n",(0,t.jsx)(n.h3,{id:"permission-issues-macoslinux",children:"Permission Issues (macOS/Linux)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Fix npm permissions\nsudo chown -R $(whoami) ~/.npm\nsudo chown -R $(whoami) /usr/local/lib/node_modules\n\n# Fix Docker permissions (Linux)\nsudo usermod -aG docker $USER\n# Log out and log back in\n"})}),"\n",(0,t.jsx)(n.h3,{id:"path-issues",children:"PATH Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check your PATH\necho $PATH\n\n# Reload shell configuration\nsource ~/.bashrc  # or ~/.zshrc for zsh\n"})}),"\n",(0,t.jsx)(n.h3,{id:"port-conflicts",children:"Port Conflicts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check what's running on common ports\nlsof -i :3000  # React development server\nlsof -i :8000  # FastAPI/Django\nlsof -i :8080  # Spring Boot\nlsof -i :5432  # PostgreSQL\nlsof -i :6379  # Redis\n\n# Kill process if needed\nkill -9 <PID>\n"})}),"\n",(0,t.jsx)(n.h3,{id:"database-connection-issues",children:"Database Connection Issues"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Check PostgreSQL is running\nps aux | grep postgres\n\n# Check PostgreSQL logs\n# macOS: tail -f /opt/homebrew/var/log/postgres.log\n# Linux: sudo tail -f /var/log/postgresql/postgresql-14-main.log\n\n# Reset PostgreSQL password\nsudo -u postgres psql\n\\password postgres\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After completing the setup:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Join the team Slack channels"}),"\n",(0,t.jsx)(n.li,{children:"Request access to development environments"}),"\n",(0,t.jsx)(n.li,{children:"Clone and explore our template projects"}),"\n",(0,t.jsx)(n.li,{children:"Complete the onboarding guide"}),"\n",(0,t.jsx)(n.li,{children:"Ask your buddy or team lead for your first task"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"maintenance",children:"Maintenance"}),"\n",(0,t.jsx)(n.h3,{id:"regular-updates",children:"Regular Updates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Update Homebrew packages (macOS)\nbrew update && brew upgrade\n\n# Update apt packages (Linux)\nsudo apt update && sudo apt upgrade\n\n# Update npm packages\nnpm update -g\n\n# Update Python packages\npip list --outdated\npoetry update  # if using Poetry\n"})}),"\n",(0,t.jsx)(n.h3,{id:"backup-configuration",children:"Backup Configuration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Export VS Code settings and extensions"}),"\n",(0,t.jsx)(n.li,{children:"Backup your SSH keys securely"}),"\n",(0,t.jsx)(n.li,{children:"Document any custom configurations"}),"\n",(0,t.jsx)(n.li,{children:"Keep a list of installed packages and tools"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var l=s(6540);const t={},i=l.createContext(t);function o(e){const n=l.useContext(i);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),l.createElement(i.Provider,{value:n},e.children)}}}]);