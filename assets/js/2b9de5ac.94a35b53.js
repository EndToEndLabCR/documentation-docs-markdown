"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[8302],{1432:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"tech-stack/git-and-github/github/flows/github-flow/README","title":"GitHub Flow Strategy","description":"GitHub Flow is a simple and effective Git branching strategy designed for continuous integration and continuous deployment (CI/CD). It\u2019s particularly well-suited for small teams and projects that require frequent updates and deployments.","source":"@site/docs/tech-stack/git-and-github/github/flows/github-flow/README.md","sourceDirName":"tech-stack/git-and-github/github/flows/github-flow","slug":"/tech-stack/git-and-github/github/flows/github-flow/","permalink":"/documentation-docs-markdown/docs/tech-stack/git-and-github/github/flows/github-flow/","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/tech-stack/git-and-github/github/flows/github-flow/README.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GitFlow Strategy","permalink":"/documentation-docs-markdown/docs/tech-stack/git-and-github/github/flows/gitflow/"},"next":{"title":"Fork-Based Workflow vs Feature Branch Workflow","permalink":"/documentation-docs-markdown/docs/tech-stack/git-and-github/github/forl_vs_feature_branch"}}');var o=t(4848),s=t(8453);const i={},a="GitHub Flow Strategy",c={},l=[{value:"How it Works",id:"how-it-works",level:2},{value:"Main Branch",id:"main-branch",level:3},{value:"Branching Model",id:"branching-model",level:3},{value:"Workflow Steps",id:"workflow-steps",level:3},{value:"Deployment Process",id:"deployment-process",level:2},{value:"Rollback Process",id:"rollback-process",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"github-flow-strategy",children:"GitHub Flow Strategy"})}),"\n",(0,o.jsx)(n.p,{children:"GitHub Flow is a simple and effective Git branching strategy designed for continuous integration and continuous deployment (CI/CD). It\u2019s particularly well-suited for small teams and projects that require frequent updates and deployments."}),"\n",(0,o.jsxs)(n.p,{children:["This document outlines the GitHub Flow strategy for a team working on a microservices project with development, staging, and production environments. The strategy includes a single ",(0,o.jsx)(n.code,{children:"main"})," branch for production-ready code and short-lived feature branches for development, with CI/CD integration and the use of Fork for collaboration."]}),"\n",(0,o.jsx)(n.h2,{id:"how-it-works",children:"How it Works"}),"\n",(0,o.jsx)(n.h3,{id:"main-branch",children:"Main Branch"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"main"})," branch is always in a deployable state. It contains production-ready code and is the single source of truth for the project."]}),"\n",(0,o.jsx)(n.h3,{id:"branching-model",children:"Branching Model"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Main"}),": Production-ready code."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Feature Branches"}),": Short-lived branches for new features or bug fixes. Created from ",(0,o.jsx)(n.code,{children:"main"})," and merged back into ",(0,o.jsx)(n.code,{children:"main"})," via pull requests."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#github-flow-strategy",children:"\u2b06\ufe0f Back to Top"})}),"\n",(0,o.jsx)(n.h3,{id:"workflow-steps",children:"Workflow Steps"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Fork the Repository"}),": Each developer forks the main repository to their own GitHub account."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone https://git.cglcloud.com/your-org/your-repo.git\ncd your-repo\ngit remote add upstream https://git.cglcloud.com/your-org/your-repo.git\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create a Feature Branch"}),": Branch off from ",(0,o.jsx)(n.code,{children:"main"})," for new features or bug fixes."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git checkout -b feature/awesome-feature main\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Develop and Commit"}),": Develop your feature or fix in the feature branch. Commit changes frequently with descriptive messages."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'git add .\ngit commit -m "Add new feature"\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Push to Fork"}),": Push your feature branch to your forked repository."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git push origin feature/awesome-feature\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Open a Pull Request"}),": Open a pull request from your forked repository to the ",(0,o.jsx)(n.code,{children:"main"})," branch of the main repository. Ensure code review and automated tests are completed before merging."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Merge"}),": Once approved, merge the pull request into ",(0,o.jsx)(n.code,{children:"main"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git branch -d feature/awesome-feature\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#github-flow-strategy",children:"\u2b06\ufe0f Back to Top"})}),"\n",(0,o.jsx)(n.h2,{id:"deployment-process",children:"Deployment Process"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Plan the Deployment to the Dev Environment"}),": A created PR into ",(0,o.jsx)(n.code,{children:"main"})," will trigger the build process for the Docker images and will run a Terraform plan for the deployment to the dev environment."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Deploy to the Dev Environment"}),": When a PR against ",(0,o.jsx)(n.code,{children:"main"})," is merged, the resulting branch will be automatically deployed via Vela to the development environment."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Deploy to Stage"}),": Ensure the currently deployed dev environment passes QA checks. When a new tag is created with the name ",(0,o.jsx)(n.code,{children:"v*.*.*-rc.*"}),", it will trigger a deployment to the staging environment."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Deploy to Prod"}),": When a new tag is created with the name ",(0,o.jsx)(n.code,{children:"v*.*.*"}),", it will trigger a deployment to the production environment."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#github-flow-strategy",children:"\u2b06\ufe0f Back to Top"})}),"\n",(0,o.jsx)(n.h2,{id:"rollback-process",children:"Rollback Process"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Identify the Tag or Commit"}),": Determine the specific tag or commit you want to roll back to. Tags are often used for this purpose because they mark specific releases. Example: If you want to roll back to version ",(0,o.jsx)(n.code,{children:"v1.0.0"}),", you would use the tag ",(0,o.jsx)(n.code,{children:"v1.0.0"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Check Out the Tag or Commit"}),": Use the ",(0,o.jsx)(n.code,{children:"git checkout"})," command to switch to the desired tag or commit."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git checkout v1.0.0\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Deploy the Rolled-Back Version"}),": Deploy the code from the checked-out tag or commit to your production environment. This ensures that the previous stable version is now running in production."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Deploy the code to production\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Create a New Branch (Optional)"}),": If you need to make further changes or fixes based on the rolled-back version, create a new branch from the tag or commit."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git checkout -b rollback-fix v1.0.0\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Merge Fixes Back to Main Branch"}),": After making necessary fixes, merge the changes back into the ",(0,o.jsx)(n.code,{children:"main"})," branch and create a new release."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'git checkout main\ngit merge rollback-fix\ngit tag -a v1.0.1 -m "Hotfix after rollback"\ngit push origin main --tags\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#github-flow-strategy",children:"\u2b06\ufe0f Back to Top"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);