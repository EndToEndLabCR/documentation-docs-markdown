"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[9579],{5963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"architecture-and-patterns/design-patterns-in-python","title":"Design Patterns in Python","description":"This file explores common design patterns in Python with practical examples and use cases.","source":"@site/docs/architecture-and-patterns/design-patterns-in-python.md","sourceDirName":"architecture-and-patterns","slug":"/architecture-and-patterns/design-patterns-in-python","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/design-patterns-in-python","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/architecture-and-patterns/design-patterns-in-python.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Architectural Styles","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/architectural-styles"},"next":{"title":"Event-Driven Architecture","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/event-driven-architecture"}}');var r=t(4848),a=t(8453);const i={},o="Design Patterns in Python",l={},c=[{value:"Creational Patterns",id:"creational-patterns",level:2},{value:"Singleton Pattern",id:"singleton-pattern",level:3},{value:"Factory Pattern",id:"factory-pattern",level:3},{value:"Builder Pattern",id:"builder-pattern",level:3},{value:"Structural Patterns",id:"structural-patterns",level:2},{value:"Adapter Pattern",id:"adapter-pattern",level:3},{value:"Decorator Pattern",id:"decorator-pattern",level:3},{value:"Facade Pattern",id:"facade-pattern",level:3},{value:"Behavioral Patterns",id:"behavioral-patterns",level:2},{value:"Observer Pattern",id:"observer-pattern",level:3},{value:"Strategy Pattern",id:"strategy-pattern",level:3},{value:"Command Pattern",id:"command-pattern",level:3},{value:"Python-Specific Patterns",id:"python-specific-patterns",level:2},{value:"Context Manager Pattern",id:"context-manager-pattern",level:3},{value:"Dependency Injection Pattern",id:"dependency-injection-pattern",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"When to Use Each Pattern",id:"when-to-use-each-pattern",level:3},{value:"Anti-patterns to Avoid",id:"anti-patterns-to-avoid",level:3},{value:"Testing Patterns",id:"testing-patterns",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"design-patterns-in-python",children:"Design Patterns in Python"})}),"\n",(0,r.jsx)(n.p,{children:"This file explores common design patterns in Python with practical examples and use cases."}),"\n",(0,r.jsx)(n.h2,{id:"creational-patterns",children:"Creational Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"singleton-pattern",children:"Singleton Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Ensures only one instance of a class exists throughout the application."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class DatabaseConnection:\n    _instance = None\n    _lock = threading.Lock()\n\n    def __new__(cls):\n        if cls._instance is None:\n            with cls._lock:\n                if cls._instance is None:\n                    cls._instance = super().__new__(cls)\n                    cls._instance._initialized = False\n        return cls._instance\n\n    def __init__(self):\n        if self._initialized:\n            return\n        self.connection = None\n        self._initialized = True\n\n    def connect(self):\n        if not self.connection:\n            self.connection = psycopg2.connect(DATABASE_URL)\n        return self.connection\n\n# Usage\ndb1 = DatabaseConnection()\ndb2 = DatabaseConnection()\nprint(db1 is db2)  # True - same instance\n\n# Modern Python approach using decorator\ndef singleton(cls):\n    instances = {}\n    def get_instance(*args, **kwargs):\n        if cls not in instances:\n            instances[cls] = cls(*args, **kwargs)\n        return instances[cls]\n    return get_instance\n\n@singleton\nclass Logger:\n    def __init__(self):\n        self.logs = []\n\n    def log(self, message):\n        self.logs.append(f"{datetime.now()}: {message}")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"factory-pattern",children:"Factory Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Creates objects without specifying their exact classes."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\n\nclass DatabaseAdapter(ABC):\n    @abstractmethod\n    def connect(self):\n        pass\n\n    @abstractmethod\n    def execute(self, query):\n        pass\n\nclass PostgreSQLAdapter(DatabaseAdapter):\n    def connect(self):\n        return psycopg2.connect(self.connection_string)\n\n    def execute(self, query):\n        with self.connect() as conn:\n            return conn.execute(query)\n\nclass MySQLAdapter(DatabaseAdapter):\n    def connect(self):\n        return mysql.connector.connect(self.connection_string)\n\n    def execute(self, query):\n        with self.connect() as conn:\n            return conn.execute(query)\n\nclass DatabaseFactory:\n    @staticmethod\n    def create_adapter(db_type: str) -> DatabaseAdapter:\n        adapters = {\n            'postgresql': PostgreSQLAdapter,\n            'mysql': MySQLAdapter,\n        }\n\n        adapter_class = adapters.get(db_type.lower())\n        if not adapter_class:\n            raise ValueError(f\"Unsupported database type: {db_type}\")\n\n        return adapter_class()\n\n# Usage\ndb_adapter = DatabaseFactory.create_adapter('postgresql')\nresult = db_adapter.execute(\"SELECT * FROM users\")\n"})}),"\n",(0,r.jsx)(n.h3,{id:"builder-pattern",children:"Builder Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Constructs complex objects step by step."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class QueryBuilder:\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self._query = {\n            'select': [],\n            'from': None,\n            'join': [],\n            'where': [],\n            'order_by': [],\n            'limit': None\n        }\n        return self\n\n    def select(self, *fields):\n        self._query['select'].extend(fields)\n        return self\n\n    def from_table(self, table):\n        self._query['from'] = table\n        return self\n\n    def join(self, table, condition):\n        self._query['join'].append(f\"JOIN {table} ON {condition}\")\n        return self\n\n    def where(self, condition):\n        self._query['where'].append(condition)\n        return self\n\n    def order_by(self, field, direction='ASC'):\n        self._query['order_by'].append(f\"{field} {direction}\")\n        return self\n\n    def limit(self, count):\n        self._query['limit'] = count\n        return self\n\n    def build(self):\n        if not self._query['from']:\n            raise ValueError(\"FROM clause is required\")\n\n        query_parts = []\n\n        # SELECT\n        select_clause = \"SELECT \" + (\", \".join(self._query['select']) or \"*\")\n        query_parts.append(select_clause)\n\n        # FROM\n        query_parts.append(f\"FROM {self._query['from']}\")\n\n        # JOIN\n        if self._query['join']:\n            query_parts.extend(self._query['join'])\n\n        # WHERE\n        if self._query['where']:\n            where_clause = \"WHERE \" + \" AND \".join(self._query['where'])\n            query_parts.append(where_clause)\n\n        # ORDER BY\n        if self._query['order_by']:\n            order_clause = \"ORDER BY \" + \", \".join(self._query['order_by'])\n            query_parts.append(order_clause)\n\n        # LIMIT\n        if self._query['limit']:\n            query_parts.append(f\"LIMIT {self._query['limit']}\")\n\n        return \" \".join(query_parts)\n\n# Usage\nquery = (QueryBuilder()\n         .select('name', 'email')\n         .from_table('users')\n         .join('profiles', 'users.id = profiles.user_id')\n         .where('users.active = true')\n         .where('profiles.verified = true')\n         .order_by('users.created_at', 'DESC')\n         .limit(10)\n         .build())\n\nprint(query)\n# SELECT name, email FROM users JOIN profiles ON users.id = profiles.user_id\n# WHERE users.active = true AND profiles.verified = true\n# ORDER BY users.created_at DESC LIMIT 10\n"})}),"\n",(0,r.jsx)(n.h2,{id:"structural-patterns",children:"Structural Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"adapter-pattern",children:"Adapter Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Allows incompatible interfaces to work together."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class LegacyPaymentSystem:\n    def make_payment(self, amount):\n        return f\"Legacy payment of ${amount} processed\"\n\nclass ModernPaymentSystem:\n    def process_payment(self, amount, currency='USD'):\n        return f\"Modern payment of {amount} {currency} processed\"\n\nclass PaymentAdapter:\n    def __init__(self, legacy_system: LegacyPaymentSystem):\n        self.legacy_system = legacy_system\n\n    def process_payment(self, amount, currency='USD'):\n        # Convert modern interface to legacy interface\n        if currency != 'USD':\n            # Convert currency logic here\n            pass\n        return self.legacy_system.make_payment(amount)\n\n# Usage\nlegacy_payment = LegacyPaymentSystem()\nadapter = PaymentAdapter(legacy_payment)\n\n# Now we can use modern interface with legacy system\nresult = adapter.process_payment(100, 'USD')\nprint(result)  # Legacy payment of $100 processed\n"})}),"\n",(0,r.jsx)(n.h3,{id:"decorator-pattern",children:"Decorator Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Adds behavior to objects dynamically without altering their structure."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from functools import wraps\nimport time\nimport logging\n\n# Function decorators\ndef timer(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        start_time = time.time()\n        result = func(*args, **kwargs)\n        end_time = time.time()\n        print(f"{func.__name__} took {end_time - start_time:.2f} seconds")\n        return result\n    return wrapper\n\ndef retry(max_attempts=3, delay=1):\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            last_exception = None\n            for attempt in range(max_attempts):\n                try:\n                    return func(*args, **kwargs)\n                except Exception as e:\n                    last_exception = e\n                    if attempt < max_attempts - 1:\n                        time.sleep(delay)\n                        continue\n                    break\n            raise last_exception\n        return wrapper\n    return decorator\n\ndef log_calls(logger=None):\n    if logger is None:\n        logger = logging.getLogger(__name__)\n\n    def decorator(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            logger.info(f"Calling {func.__name__} with args={args}, kwargs={kwargs}")\n            try:\n                result = func(*args, **kwargs)\n                logger.info(f"{func.__name__} returned {result}")\n                return result\n            except Exception as e:\n                logger.error(f"{func.__name__} raised {e}")\n                raise\n        return wrapper\n    return decorator\n\n# Class-based decorator\nclass RateLimiter:\n    def __init__(self, max_calls=10, time_window=60):\n        self.max_calls = max_calls\n        self.time_window = time_window\n        self.calls = []\n\n    def __call__(self, func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            now = time.time()\n            # Remove old calls outside time window\n            self.calls = [call_time for call_time in self.calls\n                         if now - call_time < self.time_window]\n\n            if len(self.calls) >= self.max_calls:\n                raise Exception("Rate limit exceeded")\n\n            self.calls.append(now)\n            return func(*args, **kwargs)\n        return wrapper\n\n# Usage\n@timer\n@retry(max_attempts=3, delay=2)\n@log_calls()\n@RateLimiter(max_calls=5, time_window=60)\ndef api_call(endpoint):\n    # Simulate API call\n    import requests\n    response = requests.get(f"https://api.example.com/{endpoint}")\n    return response.json()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"facade-pattern",children:"Facade Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Provides a simplified interface to a complex subsystem."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"class EmailService:\n    def send_email(self, to, subject, body):\n        print(f\"Sending email to {to}: {subject}\")\n\nclass SMSService:\n    def send_sms(self, phone, message):\n        print(f\"Sending SMS to {phone}: {message}\")\n\nclass PushNotificationService:\n    def send_push(self, device_id, message):\n        print(f\"Sending push to {device_id}: {message}\")\n\nclass NotificationFacade:\n    def __init__(self):\n        self.email_service = EmailService()\n        self.sms_service = SMSService()\n        self.push_service = PushNotificationService()\n\n    def notify_user(self, user, message, channels=None):\n        if channels is None:\n            channels = ['email']  # Default channel\n\n        if 'email' in channels and user.email:\n            self.email_service.send_email(\n                user.email,\n                \"Notification\",\n                message\n            )\n\n        if 'sms' in channels and user.phone:\n            self.sms_service.send_sms(user.phone, message)\n\n        if 'push' in channels and user.device_id:\n            self.push_service.send_push(user.device_id, message)\n\n    def send_welcome_message(self, user):\n        welcome_msg = f\"Welcome {user.name}! Thanks for joining us.\"\n        self.notify_user(user, welcome_msg, ['email', 'push'])\n\n    def send_urgent_alert(self, user, alert_message):\n        self.notify_user(user, alert_message, ['email', 'sms', 'push'])\n\n# Usage\nnotification_system = NotificationFacade()\nuser = User(name=\"John\", email=\"john@example.com\", phone=\"+1234567890\")\nnotification_system.send_welcome_message(user)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"behavioral-patterns",children:"Behavioral Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"observer-pattern",children:"Observer Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Defines a one-to-many dependency between objects."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\nfrom typing import List\n\nclass Observer(ABC):\n    @abstractmethod\n    def update(self, subject, event_data):\n        pass\n\nclass Subject:\n    def __init__(self):\n        self._observers: List[Observer] = []\n\n    def attach(self, observer: Observer):\n        if observer not in self._observers:\n            self._observers.append(observer)\n\n    def detach(self, observer: Observer):\n        if observer in self._observers:\n            self._observers.remove(observer)\n\n    def notify(self, event_data=None):\n        for observer in self._observers:\n            observer.update(self, event_data)\n\nclass User(Subject):\n    def __init__(self, name, email):\n        super().__init__()\n        self.name = name\n        self.email = email\n        self._status = \"offline\"\n\n    @property\n    def status(self):\n        return self._status\n\n    @status.setter\n    def status(self, value):\n        old_status = self._status\n        self._status = value\n        self.notify({\n            'event': 'status_changed',\n            'old_status': old_status,\n            'new_status': value,\n            'user': self\n        })\n\nclass EmailNotifier(Observer):\n    def update(self, subject, event_data):\n        if event_data['event'] == 'status_changed':\n            user = event_data['user']\n            print(f\"Email: {user.name} status changed to {event_data['new_status']}\")\n\nclass ActivityLogger(Observer):\n    def __init__(self):\n        self.log = []\n\n    def update(self, subject, event_data):\n        if event_data['event'] == 'status_changed':\n            user = event_data['user']\n            log_entry = f\"{time.time()}: {user.name} {event_data['old_status']} -> {event_data['new_status']}\"\n            self.log.append(log_entry)\n            print(f\"Log: {log_entry}\")\n\n# Usage\nuser = User(\"Alice\", \"alice@example.com\")\nemail_notifier = EmailNotifier()\nlogger = ActivityLogger()\n\nuser.attach(email_notifier)\nuser.attach(logger)\n\nuser.status = \"online\"   # Triggers notifications\nuser.status = \"away\"     # Triggers notifications\n"})}),"\n",(0,r.jsx)(n.h3,{id:"strategy-pattern",children:"Strategy Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Defines a family of algorithms and makes them interchangeable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\n\nclass PaymentStrategy(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass CreditCardPayment(PaymentStrategy):\n    def __init__(self, card_number, cvv, expiry):\n        self.card_number = card_number\n        self.cvv = cvv\n        self.expiry = expiry\n\n    def pay(self, amount):\n        return f"Paid ${amount} using Credit Card ending in {self.card_number[-4:]}"\n\nclass PayPalPayment(PaymentStrategy):\n    def __init__(self, email):\n        self.email = email\n\n    def pay(self, amount):\n        return f"Paid ${amount} using PayPal account {self.email}"\n\nclass CryptoPayment(PaymentStrategy):\n    def __init__(self, wallet_address, currency):\n        self.wallet_address = wallet_address\n        self.currency = currency\n\n    def pay(self, amount):\n        return f"Paid {amount} {self.currency} to wallet {self.wallet_address[:8]}..."\n\nclass PaymentProcessor:\n    def __init__(self):\n        self._strategy = None\n\n    def set_payment_method(self, strategy: PaymentStrategy):\n        self._strategy = strategy\n\n    def process_payment(self, amount):\n        if not self._strategy:\n            raise ValueError("Payment method not set")\n        return self._strategy.pay(amount)\n\n# Usage\nprocessor = PaymentProcessor()\n\n# Credit card payment\ncredit_card = CreditCardPayment("1234567890123456", "123", "12/25")\nprocessor.set_payment_method(credit_card)\nresult1 = processor.process_payment(100)\nprint(result1)\n\n# PayPal payment\npaypal = PayPalPayment("user@example.com")\nprocessor.set_payment_method(paypal)\nresult2 = processor.process_payment(100)\nprint(result2)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"command-pattern",children:"Command Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Encapsulates requests as objects, allowing you to parameterize clients with different requests."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\nfrom typing import List\n\nclass Command(ABC):\n    @abstractmethod\n    def execute(self):\n        pass\n\n    @abstractmethod\n    def undo(self):\n        pass\n\nclass Light:\n    def __init__(self, location):\n        self.location = location\n        self.is_on = False\n\n    def turn_on(self):\n        self.is_on = True\n        print(f"{self.location} light is ON")\n\n    def turn_off(self):\n        self.is_on = False\n        print(f"{self.location} light is OFF")\n\nclass LightOnCommand(Command):\n    def __init__(self, light: Light):\n        self.light = light\n\n    def execute(self):\n        self.light.turn_on()\n\n    def undo(self):\n        self.light.turn_off()\n\nclass LightOffCommand(Command):\n    def __init__(self, light: Light):\n        self.light = light\n\n    def execute(self):\n        self.light.turn_off()\n\n    def undo(self):\n        self.light.turn_on()\n\nclass MacroCommand(Command):\n    def __init__(self, commands: List[Command]):\n        self.commands = commands\n\n    def execute(self):\n        for command in self.commands:\n            command.execute()\n\n    def undo(self):\n        # Undo in reverse order\n        for command in reversed(self.commands):\n            command.undo()\n\nclass RemoteControl:\n    def __init__(self):\n        self.commands = {}\n        self.last_command = None\n\n    def set_command(self, slot, command: Command):\n        self.commands[slot] = command\n\n    def press_button(self, slot):\n        if slot in self.commands:\n            command = self.commands[slot]\n            command.execute()\n            self.last_command = command\n\n    def press_undo(self):\n        if self.last_command:\n            self.last_command.undo()\n\n# Usage\nliving_room_light = Light("Living Room")\nkitchen_light = Light("Kitchen")\n\nliving_room_on = LightOnCommand(living_room_light)\nliving_room_off = LightOffCommand(living_room_light)\nkitchen_on = LightOnCommand(kitchen_light)\nkitchen_off = LightOffCommand(kitchen_light)\n\n# Macro command for "Party Mode"\nparty_mode = MacroCommand([living_room_on, kitchen_on])\n\nremote = RemoteControl()\nremote.set_command(1, living_room_on)\nremote.set_command(2, living_room_off)\nremote.set_command(3, party_mode)\n\nremote.press_button(1)  # Turn on living room light\nremote.press_undo()     # Turn off living room light\nremote.press_button(3)  # Party mode - turn on all lights\nremote.press_undo()     # Undo party mode - turn off all lights\n'})}),"\n",(0,r.jsx)(n.h2,{id:"python-specific-patterns",children:"Python-Specific Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"context-manager-pattern",children:"Context Manager Pattern"}),"\n",(0,r.jsxs)(n.p,{children:["Manages resources properly using the ",(0,r.jsx)(n.code,{children:"with"})," statement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class DatabaseConnection:\n    def __init__(self, host, port, database):\n        self.host = host\n        self.port = port\n        self.database = database\n        self.connection = None\n\n    def __enter__(self):\n        self.connection = psycopg2.connect(\n            host=self.host,\n            port=self.port,\n            database=self.database\n        )\n        return self.connection\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.connection:\n            if exc_type is None:\n                self.connection.commit()\n            else:\n                self.connection.rollback()\n            self.connection.close()\n        return False  # Don\'t suppress exceptions\n\n# Usage\nwith DatabaseConnection(\'localhost\', 5432, \'mydb\') as conn:\n    cursor = conn.cursor()\n    cursor.execute("SELECT * FROM users")\n    results = cursor.fetchall()\n# Connection automatically closed and committed/rolled back\n\n# Using contextlib\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer_context(operation_name):\n    start_time = time.time()\n    print(f"Starting {operation_name}...")\n    try:\n        yield\n    finally:\n        end_time = time.time()\n        print(f"{operation_name} completed in {end_time - start_time:.2f} seconds")\n\n# Usage\nwith timer_context("Database query"):\n    time.sleep(2)  # Simulate work\n'})}),"\n",(0,r.jsx)(n.h3,{id:"dependency-injection-pattern",children:"Dependency Injection Pattern"}),"\n",(0,r.jsx)(n.p,{children:"Provides dependencies from external sources rather than creating them internally."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from abc import ABC, abstractmethod\nfrom typing import Dict, Type, Any\n\nclass Repository(ABC):\n    @abstractmethod\n    def save(self, entity):\n        pass\n\n    @abstractmethod\n    def find_by_id(self, id):\n        pass\n\nclass DatabaseRepository(Repository):\n    def __init__(self, connection):\n        self.connection = connection\n\n    def save(self, entity):\n        # Database save logic\n        print(f\"Saving {entity} to database\")\n\n    def find_by_id(self, id):\n        # Database query logic\n        print(f\"Finding entity with id {id} from database\")\n        return f\"Entity_{id}\"\n\nclass InMemoryRepository(Repository):\n    def __init__(self):\n        self.data = {}\n\n    def save(self, entity):\n        self.data[entity.id] = entity\n        print(f\"Saving {entity} to memory\")\n\n    def find_by_id(self, id):\n        return self.data.get(id)\n\nclass UserService:\n    def __init__(self, repository: Repository):\n        self.repository = repository\n\n    def create_user(self, user_data):\n        user = User(user_data)\n        self.repository.save(user)\n        return user\n\n    def get_user(self, user_id):\n        return self.repository.find_by_id(user_id)\n\n# Simple DI Container\nclass DIContainer:\n    def __init__(self):\n        self._services: Dict[str, Any] = {}\n        self._singletons: Dict[str, Any] = {}\n\n    def register(self, name: str, factory, singleton=False):\n        self._services[name] = (factory, singleton)\n\n    def get(self, name: str):\n        if name not in self._services:\n            raise ValueError(f\"Service '{name}' not registered\")\n\n        factory, is_singleton = self._services[name]\n\n        if is_singleton:\n            if name not in self._singletons:\n                self._singletons[name] = factory()\n            return self._singletons[name]\n\n        return factory()\n\n# Setup container\ncontainer = DIContainer()\ncontainer.register('repository',\n                  lambda: DatabaseRepository(connection=\"db_conn\"),\n                  singleton=True)\ncontainer.register('user_service',\n                  lambda: UserService(container.get('repository')))\n\n# Usage\nuser_service = container.get('user_service')\nuser = user_service.create_user({'name': 'John', 'email': 'john@example.com'})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"when-to-use-each-pattern",children:"When to Use Each Pattern"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Singleton"}),": Use sparingly, mainly for logging, configuration, or connection pools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Factory"}),": When you need to create objects based on conditions or configuration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Builder"}),": For complex objects with many optional parameters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observer"}),": For event-driven systems and loose coupling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Strategy"}),": When you have multiple algorithms for the same task"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Command"}),": For undo/redo functionality or queuing operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Decorator"}),": For adding functionality without modifying existing code"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"anti-patterns-to-avoid",children:"Anti-patterns to Avoid"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# God Object - does too much\nclass UserManager:\n    def authenticate(self, user): pass\n    def send_email(self, user): pass\n    def log_activity(self, user): pass\n    def encrypt_password(self, password): pass\n    def validate_input(self, data): pass\n    # ... 50 more methods\n\n# Spaghetti Code - unclear dependencies\ndef process_user(data):\n    if validate_data(data):\n        user = create_user(data)\n        if send_welcome_email(user):\n            if log_user_creation(user):\n                return update_statistics(user)\n    return None\n\n# Better: Use proper separation of concerns\nclass UserService:\n    def __init__(self, validator, repository, email_service, logger):\n        self.validator = validator\n        self.repository = repository\n        self.email_service = email_service\n        self.logger = logger\n\n    def create_user(self, data):\n        if not self.validator.validate(data):\n            raise ValidationError("Invalid user data")\n\n        user = User(data)\n        self.repository.save(user)\n        self.email_service.send_welcome_email(user)\n        self.logger.log_user_creation(user)\n\n        return user\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testing-patterns",children:"Testing Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Dependency injection makes testing easier\nclass TestUserService:\n    def test_create_user(self):\n        # Arrange\n        mock_repository = Mock(spec=Repository)\n        mock_email_service = Mock()\n        mock_logger = Mock()\n\n        user_service = UserService(\n            validator=AlwaysValidValidator(),\n            repository=mock_repository,\n            email_service=mock_email_service,\n            logger=mock_logger\n        )\n\n        # Act\n        user = user_service.create_user({'name': 'Test', 'email': 'test@example.com'})\n\n        # Assert\n        mock_repository.save.assert_called_once()\n        mock_email_service.send_welcome_email.assert_called_once_with(user)\n        mock_logger.log_user_creation.assert_called_once_with(user)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Design patterns provide proven solutions to common programming problems. Choose patterns based on your specific needs and avoid over-engineering simple solutions."})]})}function f(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(6540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);