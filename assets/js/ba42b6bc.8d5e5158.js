"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[9383],{4253:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"architecture-and-patterns/microservices-architecture","title":"Microservices Architecture","description":"This file provides a comprehensive guide to implementing microservices architecture effectively.","source":"@site/docs/architecture-and-patterns/microservices-architecture.md","sourceDirName":"architecture-and-patterns","slug":"/architecture-and-patterns/microservices-architecture","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/microservices-architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/architecture-and-patterns/microservices-architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Event-Driven Architecture","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/event-driven-architecture"},"next":{"title":"python-api-project-tree","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/python-api-project-tree"}}');var t=r(4848),s=r(8453);const a={},c="Microservices Architecture",o={},l=[{value:"Core Principles",id:"core-principles",level:2},{value:"Service Design Principles",id:"service-design-principles",level:3},{value:"Domain-Driven Design Integration",id:"domain-driven-design-integration",level:3},{value:"Service Communication",id:"service-communication",level:2},{value:"Synchronous Communication",id:"synchronous-communication",level:3},{value:"Asynchronous Communication",id:"asynchronous-communication",level:3},{value:"Data Management",id:"data-management",level:2},{value:"Database per Service",id:"database-per-service",level:3},{value:"Saga Pattern for Distributed Transactions",id:"saga-pattern-for-distributed-transactions",level:3},{value:"Service Discovery",id:"service-discovery",level:2},{value:"Eureka Server Configuration",id:"eureka-server-configuration",level:3},{value:"Service Registration",id:"service-registration",level:3},{value:"API Gateway",id:"api-gateway",level:2},{value:"Spring Cloud Gateway",id:"spring-cloud-gateway",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Distributed Tracing",id:"distributed-tracing",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Deployment Strategies",id:"deployment-strategies",level:2},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Security",id:"security",level:2},{value:"JWT Authentication",id:"jwt-authentication",level:3},{value:"Service-to-Service Authentication",id:"service-to-service-authentication",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Service Sizing",id:"service-sizing",level:3},{value:"Communication Guidelines",id:"communication-guidelines",level:3},{value:"Testing Strategy",id:"testing-strategy",level:3},{value:"Common Pitfalls",id:"common-pitfalls",level:2},{value:"Distributed Monolith",id:"distributed-monolith",level:3},{value:"Chatty Interfaces",id:"chatty-interfaces",level:3},{value:"Data Consistency Issues",id:"data-consistency-issues",level:3},{value:"Solutions",id:"solutions",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"microservices-architecture",children:"Microservices Architecture"})}),"\n",(0,t.jsx)(n.p,{children:"This file provides a comprehensive guide to implementing microservices architecture effectively."}),"\n",(0,t.jsx)(n.h2,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsx)(n.h3,{id:"service-design-principles",children:"Service Design Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single Responsibility"}),": Each service has one business capability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Autonomous"}),": Services can be developed, deployed, and scaled independently"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Business-Focused"}),": Services align with business domains"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Decentralized"}),": No central coordination point"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Failure-Resilient"}),": Services handle failures gracefully"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"domain-driven-design-integration",children:"Domain-Driven Design Integration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Bounded Context example\n@Service\npublic class OrderService {\n    // Order domain logic only\n    public Order createOrder(CreateOrderCommand command) {\n        Order order = new Order(command.getUserId(), command.getItems());\n        order.calculateTotal();\n        return orderRepository.save(order);\n    }\n}\n\n@Service\npublic class InventoryService {\n    // Inventory domain logic only\n    public void reserveItems(List<OrderItem> items) {\n        for (OrderItem item : items) {\n            inventory.reserve(item.getProductId(), item.getQuantity());\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"service-communication",children:"Service Communication"}),"\n",(0,t.jsx)(n.h3,{id:"synchronous-communication",children:"Synchronous Communication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Using Feign Client\n@FeignClient(name = "user-service")\npublic interface UserServiceClient {\n    @GetMapping("/users/{id}")\n    User getUser(@PathVariable("id") Long id);\n}\n\n// With Circuit Breaker\n@Service\npublic class OrderService {\n    @Autowired\n    private UserServiceClient userServiceClient;\n\n    @CircuitBreaker(name = "user-service", fallbackMethod = "fallbackGetUser")\n    public User getUser(Long userId) {\n        return userServiceClient.getUser(userId);\n    }\n\n    public User fallbackGetUser(Long userId, Exception ex) {\n        return User.defaultUser(); // Fallback response\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"asynchronous-communication",children:"Asynchronous Communication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Event Publishing\n@Component\npublic class OrderEventPublisher {\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    public void publishOrderCreated(Order order) {\n        OrderCreatedEvent event = new OrderCreatedEvent(\n            order.getId(),\n            order.getUserId(),\n            order.getTotal()\n        );\n        rabbitTemplate.convertAndSend("order.exchange", "order.created", event);\n    }\n}\n\n// Event Consumption\n@RabbitListener(queues = "notification.order.created")\npublic class NotificationService {\n    public void handleOrderCreated(OrderCreatedEvent event) {\n        sendOrderConfirmation(event.getUserId(), event.getOrderId());\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"data-management",children:"Data Management"}),"\n",(0,t.jsx)(n.h3,{id:"database-per-service",children:"Database per Service"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Docker Compose for multiple databases\nversion: "3.8"\nservices:\n  user-db:\n    image: postgres:14\n    environment:\n      POSTGRES_DB: userdb\n      POSTGRES_USER: user_svc\n      POSTGRES_PASSWORD: password\n\n  order-db:\n    image: postgres:14\n    environment:\n      POSTGRES_DB: orderdb\n      POSTGRES_USER: order_svc\n      POSTGRES_PASSWORD: password\n\n  product-db:\n    image: mongo:5\n    environment:\n      MONGO_INITDB_DATABASE: productdb\n'})}),"\n",(0,t.jsx)(n.h3,{id:"saga-pattern-for-distributed-transactions",children:"Saga Pattern for Distributed Transactions"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Orchestration-based Saga\n@Service\npublic class OrderSagaOrchestrator {\n\n    public void processOrder(OrderRequest request) {\n        try {\n            // Step 1: Reserve inventory\n            inventoryService.reserveItems(request.getItems());\n\n            // Step 2: Process payment\n            paymentService.processPayment(request.getPayment());\n\n            // Step 3: Create order\n            orderService.createOrder(request);\n\n            // Step 4: Send confirmation\n            notificationService.sendConfirmation(request.getUserId());\n\n        } catch (Exception e) {\n            // Compensate in reverse order\n            compensate(request);\n        }\n    }\n\n    private void compensate(OrderRequest request) {\n        try {\n            notificationService.sendCancellation(request.getUserId());\n            orderService.cancelOrder(request.getOrderId());\n            paymentService.refundPayment(request.getPayment());\n            inventoryService.releaseItems(request.getItems());\n        } catch (Exception e) {\n            // Log compensation failure\n            log.error("Saga compensation failed", e);\n        }\n    }\n}\n\n// Choreography-based Saga\n@EventListener\npublic class InventoryService {\n\n    @EventListener\n    public void on(OrderCreatedEvent event) {\n        try {\n            reserveItems(event.getItems());\n            eventPublisher.publish(new ItemsReservedEvent(event.getOrderId()));\n        } catch (InsufficientInventoryException e) {\n            eventPublisher.publish(new ItemReservationFailedEvent(event.getOrderId()));\n        }\n    }\n}\n\n@EventListener\npublic class PaymentService {\n\n    @EventListener\n    public void on(ItemsReservedEvent event) {\n        try {\n            processPayment(event.getOrderId());\n            eventPublisher.publish(new PaymentProcessedEvent(event.getOrderId()));\n        } catch (PaymentException e) {\n            eventPublisher.publish(new PaymentFailedEvent(event.getOrderId()));\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,t.jsx)(n.h3,{id:"eureka-server-configuration",children:"Eureka Server Configuration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\n@EnableEurekaServer\npublic class ServiceRegistryApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ServiceRegistryApplication.class, args);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"service-registration",children:"Service Registration"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"# application.yml for service\neureka:\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka/\n  instance:\n    hostname: localhost\n\nspring:\n  application:\n    name: user-service\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-gateway",children:"API Gateway"}),"\n",(0,t.jsx)(n.h3,{id:"spring-cloud-gateway",children:"Spring Cloud Gateway"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class GatewayConfig {\n\n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n        return builder.routes()\n            .route("user-service", r -> r.path("/api/users/**")\n                .filters(f -> f.stripPrefix(1)\n                    .circuitBreaker(c -> c.setName("user-service")\n                        .setFallbackUri("forward:/fallback/users")))\n                .uri("lb://user-service"))\n            .route("order-service", r -> r.path("/api/orders/**")\n                .filters(f -> f.stripPrefix(1)\n                    .requestRateLimiter(c -> c.setRateLimiter(redisRateLimiter())))\n                .uri("lb://order-service"))\n            .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(n.h3,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Spring Cloud Sleuth configuration\n@Configuration\npublic class TracingConfig {\n\n    @Bean\n    public Sender sender() {\n        return OkHttpSender.create("http://zipkin:9411/api/v2/spans");\n    }\n\n    @Bean\n    public AsyncReporter<Span> spanReporter() {\n        return AsyncReporter.create(sender());\n    }\n}\n\n// Custom tracing\n@Service\npublic class UserService {\n\n    @NewSpan("get-user")\n    public User getUser(@SpanTag("userId") Long userId) {\n        return userRepository.findById(userId);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\npublic class DatabaseHealthIndicator implements HealthIndicator {\n\n    @Autowired\n    private DataSource dataSource;\n\n    @Override\n    public Health health() {\n        try (Connection connection = dataSource.getConnection()) {\n            if (connection.isValid(1)) {\n                return Health.up()\n                    .withDetail("database", "Available")\n                    .build();\n            }\n        } catch (SQLException e) {\n            return Health.down()\n                .withDetail("database", "Unavailable")\n                .withException(e)\n                .build();\n        }\n        return Health.down().build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-strategies",children:"Deployment Strategies"}),"\n",(0,t.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# user-service-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-service\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: user-service\n  template:\n    metadata:\n      labels:\n        app: user-service\n    spec:\n      containers:\n        - name: user-service\n          image: user-service:latest\n          ports:\n            - containerPort: 8080\n          env:\n            - name: DB_URL\n              valueFrom:\n                secretKeyRef:\n                  name: db-secret\n                  key: url\n          resources:\n            requests:\n              memory: "256Mi"\n              cpu: "250m"\n            limits:\n              memory: "512Mi"\n              cpu: "500m"\n          livenessProbe:\n            httpGet:\n              path: /actuator/health\n              port: 8080\n            initialDelaySeconds: 30\n            periodSeconds: 10\n          readinessProbe:\n            httpGet:\n              path: /actuator/health/readiness\n              port: 8080\n            initialDelaySeconds: 5\n            periodSeconds: 5\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-service\nspec:\n  selector:\n    app: user-service\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 8080\n  type: ClusterIP\n'})}),"\n",(0,t.jsx)(n.h2,{id:"security",children:"Security"}),"\n",(0,t.jsx)(n.h3,{id:"jwt-authentication",children:"JWT Authentication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        return http\n            .csrf().disable()\n            .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers("/actuator/**").permitAll()\n                .anyRequest().authenticated())\n            .oauth2ResourceServer(oauth2 -> oauth2.jwt())\n            .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"service-to-service-authentication",children:"Service-to-Service Authentication"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class FeignConfig {\n\n    @Bean\n    public RequestInterceptor requestInterceptor() {\n        return requestTemplate -> {\n            String token = SecurityContextHolder.getContext()\n                .getAuthentication()\n                .getCredentials()\n                .toString();\n            requestTemplate.header("Authorization", "Bearer " + token);\n        };\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"service-sizing",children:"Service Sizing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Team Size"}),": Two-pizza team rule (6-8 people)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Codebase"}),": Should be maintainable by one team"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Data"}),": Single business entity or aggregate"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deployment"}),": Independently deployable"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"communication-guidelines",children:"Communication Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prefer Async"}),": Use events for non-critical operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Timeout Handling"}),": Always set timeouts for sync calls"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Circuit Breakers"}),": Prevent cascade failures"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Idempotency"}),": Make operations repeatable safely"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Contract Testing with Pact\n@ExtendWith(PactConsumerTestExt.class)\n@PactTestFor(providerName = "user-service")\npublic class UserServiceContractTest {\n\n    @Pact(consumer = "order-service")\n    public RequestResponsePact userExistsPact(PactDslWithProvider builder) {\n        return builder\n            .given("user exists")\n            .uponReceiving("a request for user")\n            .path("/users/123")\n            .method("GET")\n            .willRespondWith()\n            .status(200)\n            .body(LambdaDsl.newJsonBody(o -> o\n                .numberType("id", 123)\n                .stringType("email", "user@example.com")))\n            .toPact();\n    }\n\n    @Test\n    @PactTestFor(pactMethod = "userExistsPact")\n    void testGetUser(MockServer mockServer) {\n        UserServiceClient client = new UserServiceClient(mockServer.getUrl());\n        User user = client.getUser(123L);\n\n        assertThat(user.getId()).isEqualTo(123L);\n        assertThat(user.getEmail()).isEqualTo("user@example.com");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"common-pitfalls",children:"Common Pitfalls"}),"\n",(0,t.jsx)(n.h3,{id:"distributed-monolith",children:"Distributed Monolith"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Services are too tightly coupled"}),"\n",(0,t.jsx)(n.li,{children:"Synchronous communication everywhere"}),"\n",(0,t.jsx)(n.li,{children:"Shared databases between services"}),"\n",(0,t.jsx)(n.li,{children:"Deploy services together"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"chatty-interfaces",children:"Chatty Interfaces"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Too many service calls for single operation"}),"\n",(0,t.jsx)(n.li,{children:"Fine-grained APIs"}),"\n",(0,t.jsx)(n.li,{children:"Network overhead"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"data-consistency-issues",children:"Data Consistency Issues"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Not handling eventual consistency"}),"\n",(0,t.jsx)(n.li,{children:"Missing compensation logic"}),"\n",(0,t.jsx)(n.li,{children:"Ignoring distributed transaction complexity"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"solutions",children:"Solutions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Design for failure"}),": Assume services will fail"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Embrace eventual consistency"}),": Design business processes accordingly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor everything"}),": Comprehensive observability"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Start with monolith"}),": Extract services gradually"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Team boundaries"}),": Align services with team ownership"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);