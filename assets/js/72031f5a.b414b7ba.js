"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[2640],{7775:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"organizational-best-practices/db-naming-and-pk-design","title":"Database Table Naming and Primary Key (PK) Design","description":"This document provides best practices for naming database tables and designing primary keys (PKs) in PostgreSQL.","source":"@site/docs/organizational-best-practices/db-naming-and-pk-design.md","sourceDirName":"organizational-best-practices","slug":"/organizational-best-practices/db-naming-and-pk-design","permalink":"/documentation-docs-markdown/docs/organizational-best-practices/db-naming-and-pk-design","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/organizational-best-practices/db-naming-and-pk-design.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Coding Guidelines","permalink":"/documentation-docs-markdown/docs/organizational-best-practices/coding-guidelines"},"next":{"title":"Project Architecture","permalink":"/documentation-docs-markdown/docs/organizational-best-practices/project-architecture"}}');var r=s(4848),l=s(8453);const a={},c="Database Table Naming and Primary Key (PK) Design",d={},t=[{value:"Table Naming: Singular vs. Plural",id:"table-naming-singular-vs-plural",level:2},{value:"Recommendation: <strong>Plural Table Names</strong>",id:"recommendation-plural-table-names",level:3},{value:"Benefits of Using Plural Table Names",id:"benefits-of-using-plural-table-names",level:3},{value:"Exceptions: When Singular Names Are Acceptable",id:"exceptions-when-singular-names-are-acceptable",level:3},{value:"Primary Key (PK) Design",id:"primary-key-pk-design",level:2},{value:"1. Generic <code>id</code> Column",id:"1-generic-id-column",level:3},{value:"Advantages",id:"advantages",level:4},{value:"Disadvantages",id:"disadvantages",level:4},{value:"2. Specific Column Names (e.g., <code>user_id</code>, <code>project_id</code>)",id:"2-specific-column-names-eg-user_id-project_id",level:3},{value:"Advantages",id:"advantages-1",level:4},{value:"Disadvantages",id:"disadvantages-1",level:4},{value:"Hybrid Approach: Best of Both Worlds",id:"hybrid-approach-best-of-both-worlds",level:3},{value:"Benefits",id:"benefits",level:4},{value:"Conclusion",id:"conclusion",level:2},{value:"Table Naming",id:"table-naming",level:3},{value:"Primary Key Design",id:"primary-key-design",level:3}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"database-table-naming-and-primary-key-pk-design",children:"Database Table Naming and Primary Key (PK) Design"})}),"\n",(0,r.jsx)(n.p,{children:"This document provides best practices for naming database tables and designing primary keys (PKs) in PostgreSQL."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"table-naming-singular-vs-plural",children:"Table Naming: Singular vs. Plural"}),"\n",(0,r.jsxs)(n.h3,{id:"recommendation-plural-table-names",children:["Recommendation: ",(0,r.jsx)(n.strong,{children:"Plural Table Names"})]}),"\n",(0,r.jsxs)(n.p,{children:["It is generally recommended to use ",(0,r.jsx)(n.strong,{children:"plural table names"})," (e.g., ",(0,r.jsx)(n.code,{children:"users"}),", ",(0,r.jsx)(n.code,{children:"projects"}),", ",(0,r.jsx)(n.code,{children:"tasks"}),", ",(0,r.jsx)(n.code,{children:"notifications"}),"). This approach is widely adopted and aligns with common database naming conventions."]}),"\n",(0,r.jsx)(n.h3,{id:"benefits-of-using-plural-table-names",children:"Benefits of Using Plural Table Names"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Descriptive and Intuitive"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Plural names clearly indicate that the table contains multiple records of the entity."}),"\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"users"})," table contains multiple user records."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consistency"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Using plural names ensures uniformity across the schema."}),"\n",(0,r.jsxs)(n.li,{children:["Example: ",(0,r.jsx)(n.code,{children:"users"}),", ",(0,r.jsx)(n.code,{children:"projects"}),", ",(0,r.jsx)(n.code,{children:"tasks"}),", and ",(0,r.jsx)(n.code,{children:"notifications"})," maintain a consistent naming style."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Avoids Ambiguity"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Singular table names like ",(0,r.jsx)(n.code,{children:"user"})," can be confused with:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A single user record."}),"\n",(0,r.jsx)(n.li,{children:'The concept of a "user" entity.'}),"\n",(0,r.jsxs)(n.li,{children:["Reserved keywords in databases (e.g., ",(0,r.jsx)(n.code,{children:"user"})," in PostgreSQL refers to the current database user)."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Future-Proof"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Even if a table starts with a single record (e.g., ",(0,r.jsx)(n.code,{children:"settings"}),"), using a plural name ensures the schema is ready for multiple records later."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"exceptions-when-singular-names-are-acceptable",children:"Exceptions: When Singular Names Are Acceptable"}),"\n",(0,r.jsx)(n.p,{children:"In rare cases, singular table names may be acceptable:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Metadata Tables"}),": Tables that store a single row or a collection of fixed settings.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples: ",(0,r.jsx)(n.code,{children:"system_setting"}),", ",(0,r.jsx)(n.code,{children:"application_config"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Highly Domain-Specific Conventions"}),": If your team or organization prefers singular names."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"primary-key-pk-design",children:"Primary Key (PK) Design"}),"\n",(0,r.jsx)(n.p,{children:"When designing primary keys, you can choose between:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Using a ",(0,r.jsxs)(n.strong,{children:["generic ",(0,r.jsx)(n.code,{children:"id"})," column"]})," for all tables."]}),"\n",(0,r.jsxs)(n.li,{children:["Using ",(0,r.jsx)(n.strong,{children:"specific column names"})," like ",(0,r.jsx)(n.code,{children:"user_id"}),", ",(0,r.jsx)(n.code,{children:"project_id"}),", etc."]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-generic-id-column",children:["1. Generic ",(0,r.jsx)(n.code,{children:"id"})," Column"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE projects (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"advantages",children:"Advantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consistency"}),": Every table has the same primary key name (",(0,r.jsx)(n.code,{children:"id"}),"), making the schema consistent."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Simplicity"}),": Many ORMs (e.g., SQLAlchemy, Django ORM) expect the primary key to be ",(0,r.jsx)(n.code,{children:"id"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ease of Foreign Keys"}),": Foreign keys can use descriptive names for better clarity:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE tasks (\n    id SERIAL PRIMARY KEY,\n    project_id INT REFERENCES projects(id)\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ambiguity in Joins"}),": When querying across multiple tables, you must qualify the ",(0,r.jsx)(n.code,{children:"id"})," column with the table name to avoid conflicts:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT users.id, projects.id FROM users JOIN projects ON users.id = projects.id;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h3,{id:"2-specific-column-names-eg-user_id-project_id",children:["2. Specific Column Names (e.g., ",(0,r.jsx)(n.code,{children:"user_id"}),", ",(0,r.jsx)(n.code,{children:"project_id"}),")"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE projects (\n    project_id SERIAL PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"advantages-1",children:"Advantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Clarity"}),": Descriptive column names like ",(0,r.jsx)(n.code,{children:"user_id"})," and ",(0,r.jsx)(n.code,{children:"project_id"})," make the schema more self-explanatory."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"No Ambiguity in Joins"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"SELECT user_id, project_id FROM users JOIN projects ON users.user_id = projects.project_id;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Improved Readability"}),": Makes the purpose of each column clear, especially in large schemas."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"disadvantages-1",children:"Disadvantages"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redundancy"}),": Repeating the table name in the column name adds verbosity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inconsistency with Some ORMs"}),": Some tools assume the primary key is ",(0,r.jsx)(n.code,{children:"id"})," by default, requiring additional configuration."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"hybrid-approach-best-of-both-worlds",children:"Hybrid Approach: Best of Both Worlds"}),"\n",(0,r.jsxs)(n.p,{children:["Use a ",(0,r.jsxs)(n.strong,{children:["generic ",(0,r.jsx)(n.code,{children:"id"})," column"]})," for primary keys and ",(0,r.jsx)(n.strong,{children:"descriptive names"})," for foreign keys:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE users (\n    id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL\n);\n\nCREATE TABLE projects (\n    id SERIAL PRIMARY KEY,\n    user_id INT REFERENCES users(id)\n);\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Combines the simplicity of generic ",(0,r.jsx)(n.code,{children:"id"})," columns with the clarity of descriptive foreign key names."]}),"\n",(0,r.jsx)(n.li,{children:"Works well with ORMs and reduces ambiguity in relationships."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.h3,{id:"table-naming",children:"Table Naming"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommended"}),": Use plural table names (e.g., ",(0,r.jsx)(n.code,{children:"users"}),", ",(0,r.jsx)(n.code,{children:"projects"}),", ",(0,r.jsx)(n.code,{children:"tasks"}),") for clarity and consistency."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exceptions"}),": Consider singular names only for metadata tables or when domain-specific conventions require it."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"primary-key-design",children:"Primary Key Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use a ",(0,r.jsxs)(n.strong,{children:["generic ",(0,r.jsx)(n.code,{children:"id"})," column"]})," for primary keys in each table for simplicity and ORM compatibility."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"descriptive names"})," (e.g., ",(0,r.jsx)(n.code,{children:"user_id"}),", ",(0,r.jsx)(n.code,{children:"project_id"}),") for foreign keys to improve clarity in relationships."]}),"\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.strong,{children:"hybrid approach"})," provides the best balance between simplicity and readability."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By following these best practices, you can ensure a clean, consistent, and maintainable database design."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var i=s(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);