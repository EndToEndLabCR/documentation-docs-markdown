"use strict";(globalThis.webpackChunkdocumentation_docs_markdown=globalThis.webpackChunkdocumentation_docs_markdown||[]).push([[7384],{8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(6540);const o={},s=r.createContext(o);function i(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},8928:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"architecture-and-patterns/python-api-project-tree","title":"python-api-project-tree","description":"","source":"@site/docs/architecture-and-patterns/python-api-project-tree.md","sourceDirName":"architecture-and-patterns","slug":"/architecture-and-patterns/python-api-project-tree","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/python-api-project-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/EndToEndLabCR/docs/architecture-and-patterns/python-api-project-tree.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Microservices Architecture","permalink":"/documentation-docs-markdown/docs/architecture-and-patterns/microservices-architecture"},"next":{"title":"Install and Setup","permalink":"/documentation-docs-markdown/docs/category/install-and-setup"}}');var o=n(4848),s=n(8453);const i={},a=void 0,c={},p=[];function u(e){const t={code:"code",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-plaintext",children:"project-root/\n\u251c\u2500\u2500 domain/\n\u2502   \u251c\u2500\u2500 entities/\n\u2502   \u2502   \u2514\u2500\u2500 user.py                  # Core User entity (business logic)\n\u2502   \u251c\u2500\u2500 value_objects/\n\u2502   \u2502   \u2514\u2500\u2500 email.py                 # Value object for email validation\n\u2502   \u2514\u2500\u2500 exceptions/\n\u2502       \u2514\u2500\u2500 user_exceptions.py       # Custom exceptions for User domain\n\u251c\u2500\u2500 application/\n\u2502   \u251c\u2500\u2500 use_cases/\n\u2502   \u2502   \u251c\u2500\u2500 create_user.py           # Use case for creating a User\n\u2502   \u2502   \u251c\u2500\u2500 get_user.py              # Use case for fetching a User\n\u2502   \u2502   \u2514\u2500\u2500 update_user.py           # Use case for updating a User\n\u2502   \u251c\u2500\u2500 dto/\n\u2502   \u2502   \u2514\u2500\u2500 user_dto.py              # Data Transfer Object for User\n\u2502   \u251c\u2500\u2500 interfaces/\n\u2502   \u2502   \u2514\u2500\u2500 user_repository.py       # Repository interface for User\n\u2502   \u2514\u2500\u2500 services/\n\u2502       \u2514\u2500\u2500 user_service.py          # Application Service for high-level logic\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 repositories/\n\u2502   \u2502   \u2514\u2500\u2500 postgres_user_repository.py  # Implementation of UserRepository for PostgreSQL\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u2514\u2500\u2500 create_user_table.sql    # Database migration script for User table\n\u2502   \u2514\u2500\u2500 config/\n\u2502       \u2514\u2500\u2500 db_connection.py         # Database connection logic\n\u251c\u2500\u2500 presentation/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 user_routes.py           # API routes for User (e.g., FastAPI or Flask endpoints)\n\u2502   \u2502   \u2514\u2500\u2500 user_schemas.py          # Request/response schemas for User (e.g., Pydantic models)\n\u2502   \u2514\u2500\u2500 graphql/\n\u2502       \u2514\u2500\u2500 user_resolvers.py        # GraphQL resolvers for User\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u2502   \u251c\u2500\u2500 test_user_entity.py      # Unit tests for User entity\n\u2502   \u2502   \u251c\u2500\u2500 test_user_service.py     # Unit tests for User service\n\u2502   \u2502   \u2514\u2500\u2500 test_user_repository.py  # Unit tests for repository interface\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u2502   \u2514\u2500\u2500 test_user_endpoints.py   # Integration tests for User API endpoints\n\u2502   \u2514\u2500\u2500 e2e/\n\u2502       \u2514\u2500\u2500 test_user_flows.py       # End-to-end tests for User workflows\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u2514\u2500\u2500 ci.yml                   # GitHub Actions CI workflow\n\u251c\u2500\u2500 Dockerfile                       # Dockerfile for building the app\n\u251c\u2500\u2500 docker-compose.yml               # Docker Compose file for local development\n\u251c\u2500\u2500 requirements.txt                 # Python dependencies (or pom.xml for Java)\n\u2514\u2500\u2500 README.md                        # Project documentation\n"})})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);